{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/env.ts","../src/lib/server.ts","../src/index.ts"],"sourcesContent":["import DB from 'better-sqlite3'\nimport { TinySynqSync, TinySynqOptions } from '@bspeckco/tinysynq-lib';\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends TinySynqSync {\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super(opts);\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n\n    if (!this.db) {\n      this._db = new DB(this.dbPath);\n      this.db.pragma('journal_mode = WAL');\n    }\n  }\n}\n","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport {\n  createInternalTablesSync,\n  setupTriggersForTableSync,\n  TinySynqOptions,\n} from \"@bspeckco/tinysynq-lib\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysync-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n\n  createInternalTablesSync({ ts });\n\n  // Enable debug mode\n  if (debug) ts.enableDebug();\n\n  // Set the device ID\n  ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      try {\n        log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n        ts.run({\n          sql: preInitQuery\n        });\n      }\n      catch(err) {\n        log.error('@preInit', err)\n      }\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    setupTriggersForTableSync({ table, ts });\n  }\n  \n  ts.tablesReady();\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.warn(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      const result = ts.run({\n        sql: postInitQuery\n      });\n      log.trace(`@@@ postInit RESULT\\n`, result);\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;\n","import 'dotenv/config'\n\ntype TinySynqEnv = typeof process.env & {\n  TINYSYNQ_WS_HOST: number;\n  TINYSYNQ_WS_PORT: number;\n  TINYSYNQ_HTTP_HOST: number;\n  TINYSYNQ_HTTP_PORT: number;\n  TINYSYNQ_LOG_LEVEL: number;\n  TINYSYNQ_LOG_FORMAT: \"json\" | \"pretty\" | \"hidden\";\n};\n\nexport const env = process.env as TinySynqEnv;","import { env } from './env.js';\nimport * as uWS from 'uWebSockets.js';\nimport { threadId } from 'worker_threads';\nimport { TinySynq } from './tinysynq.class.js';\nimport { Change, LogLevel, SyncRequestType, SyncResponseType } from '@bspeckco/tinysynq-lib';\nimport { ILogObj, ISettingsParam, Logger } from 'tslog';\n\ninterface TSTemplatedApp extends uWS.TemplatedApp {\n  ts: TinySynq;\n  log: Logger<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>;\n}\n\nexport type SocketRequestType = 'push' | 'pull'\n\nexport interface TSServerParams {\n  ts: TinySynq,\n  port?: number;\n  logOptions: ISettingsParam<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>;\n}\n\nexport interface TSSocketRequestParams {\n  changes?: Change[];\n  requestId?: string;\n  source?: string;\n  type: SocketRequestType;\n  since: string;            // datetime of last change\n  checkpoint: number;       // ID of last change\n}\n\nlet server;\n\nfunction arrayBufferToString(arrBuff: ArrayBuffer): string {\n  return Buffer.from(arrBuff).toString();\n} \n\nconst app = uWS.App() as TSTemplatedApp;\n\napp.ws('/*', {\n  compression: uWS.SHARED_COMPRESSOR,\n  maxPayloadLength: 16 * 1024 * 1024, // 16MB\n  idleTimeout: 120,\n  sendPingsAutomatically: true,\n  upgrade: async (res, req, context) => {\n    const secWebSocketKey = req.getHeader('sec-websocket-key');\n    const secWebSocketProtocol = req.getHeader('sec-websocket-protocol');\n    const secWebSocketExtensions = req.getHeader('sec-websocket-extensions');\n    const remoteAddress = arrayBufferToString(res.getRemoteAddressAsText());\n\n    let userData: Record<string, any> = { remoteAddress }; // Include remote address in userData by default\n\n    try {\n      if (app.auth) {\n        app.log.debug(`Performing auth for ${remoteAddress}`);\n        const authResult = await app.auth(req);\n\n        if (authResult === true) {\n          // Auth successful (simple boolean success)\n          app.log.debug(`Auth successful (true) for ${remoteAddress}`);\n        } else if (typeof authResult === 'object' && authResult !== null) {\n          // Auth successful (with user data)\n          userData = { ...userData, ...authResult }; // Merge auth result object into userData\n          app.log.debug(`Auth successful (object) for ${remoteAddress}`, userData);\n        } else {\n          // Auth failed (includes false, undefined, null, numbers, strings, etc.)\n          app.log.warn(`Auth failed (result was ${JSON.stringify(authResult)}) for ${remoteAddress}`);\n          res.writeStatus('401 Unauthorized').end();\n          return;\n        }\n\n      } else {\n        app.log.trace(`No auth function configured, allowing connection for ${remoteAddress}`);\n      }\n\n      // Upgrade the connection, passing userData\n      res.upgrade(\n        { userData }, // Pass the userData object\n        secWebSocketKey,\n        secWebSocketProtocol,\n        secWebSocketExtensions,\n        context\n      );\n    } catch (err: any) {\n      app.log.error(`Auth error for ${remoteAddress}: ${err.message}`);\n      // Ensure response is ended in case of error during auth\n      // Use writeStatus before end for proper HTTP response\n      res.writeStatus('500 Internal Server Error').end();\n    }\n  },\n  open: ws => {\n    const userData = ws.getUserData(); // Retrieve userData passed from upgrade\n    app.log.warn('@Connected!', userData); // Log userData on connect\n    ws.subscribe('broadcast');\n  },\n  message: (ws, message, isBinary) => {\n    const addr = arrayBufferToString(ws.getRemoteAddressAsText());\n    const messageString = arrayBufferToString(message);\n    const parsed = JSON.parse(messageString) as TSSocketRequestParams;\n    const { requestId } = parsed;\n    app.log.trace('@parsed', parsed);\n    app.log.debug('@Message!', parsed.changes, app.ts.deviceId);\n    try {\n      switch(parsed.type) {\n        case SyncRequestType.push:\n          if (!parsed.source) {\n            app.log.error('INVALID_SOURCE', {parsed});\n            throw new Error('Invalid source');\n          }  \n          const incoming = parsed.changes?.map((c: any) => {\n            c.source = parsed.source;\n            delete c.mod;\n            return c as Change;\n          }) || [];\n          app.log.debug('\\n<<<< INCOMING >>>>\\n', incoming);\n          app.ts.applyChangesToLocalDB({changes: incoming});\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId}));\n          ws.publish('broadcast', JSON.stringify({changes: incoming}), false);\n          break;\n        case SyncRequestType.pull:\n          // @TODO: Eh? Didn't I work this out already?\n          const params = { ...parsed } as any;\n          delete params?.type;\n          const changes = app.ts.getFilteredChanges(parsed);\n          app.log.debug('@pull: outgoing:', changes);\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId, changes}));\n          break;\n        default:\n          throw new Error(`Invalid request type: '${parsed.type}'`);\n      }\n      \n    }\n    catch(err: any) {\n      app.log.error(err, {addr, for: JSON.stringify(parsed)});\n      ws.send(JSON.stringify({\n        type: SyncResponseType.nack,\n        requestId: parsed.requestId,\n        message: err.message\n      }));\n    }\n  },\n});\n\n// Define the return type for the start function\nexport interface TinySynqServerControl {\n  app: TSTemplatedApp;\n  close: () => void;\n}\n\nexport const startTinySynqServer = (params: TSServerParams): TinySynqServerControl => {\n  let listenSocket: uWS.us_listen_socket | null = null;\n  const port = params.port || Number(env.TINYSYNQ_WS_PORT) || 7174;\n  app.ts = params.ts;\n  app.auth = params.auth;\n  app.log = new Logger({\n    name:'tinysynq-node-ws',\n    minLevel: params.logOptions.minLevel || Number(env.TINYSYNQ_LOG_LEVEL) || LogLevel.Info,\n    type: env.TINYSYNQ_LOG_FORMAT || 'json',\n    ...(params.logOptions || {})\n  });\n\n  app.listen(port, socket => {\n    listenSocket = socket; // Store the socket\n    if (listenSocket) {\n      app.log.info(`TinySynq server listening on port ${port} from thread ${threadId}`);\n    } else {\n      app.log.error(`Failed to listen on port ${port} from thread ${threadId}`);\n    }\n  });\n\n  // Return the app instance and a close function\n  return {\n    app,\n    close: () => {\n      if (listenSocket) {\n        app.log.info(`Closing server socket on port ${port}`);\n        uWS.us_listen_socket_close(listenSocket);\n        listenSocket = null; // Prevent double closing\n      } else {\n        app.log.warn(`Attempted to close server, but socket was not listening or already closed.`);\n      }\n    }\n  };\n}\n","import lib from './lib/index.js';\nimport { startTinySynqServer } from './lib/server.js';\n\nexport default { startTinySynqServer, initTinySynq: lib };\n\nexport type { \n  BetterSqlite3Instance,\n} from './lib/types.js';\n\nexport type {\n  SyncableTable,\n  TinySynqOptions,\n  GetTableIdColumnParams,\n  Change,\n  QueryParams,\n} from '@bspeckco/tinysynq-lib';\n\nexport type {\n  TinySynq,\n} from './lib/tinysynq.class.js';\n"],"names":["TinySynq","TinySynqSync","constructor","opts","filePath","sqlite3","Error","db","_db","DB","dbPath","pragma","initTinySynq","config","tables","preInit","postInit","logOptions","debug","length","log","Logger","name","ts","createInternalTablesSync","enableDebug","setDeviceId","preInitQuery","run","sql","err","error","synqPrefix","runQuery","table","exists","id","setupTriggersForTableSync","tablesReady","postInitQuery","warn","result","trace","env","process","arrayBufferToString","arrBuff","Buffer","from","toString","app","uWS","App","ws","compression","SHARED_COMPRESSOR","maxPayloadLength","idleTimeout","sendPingsAutomatically","upgrade","res","req","context","secWebSocketKey","getHeader","secWebSocketProtocol","secWebSocketExtensions","remoteAddress","getRemoteAddressAsText","userData","auth","authResult","JSON","stringify","writeStatus","end","message","open","getUserData","subscribe","isBinary","_parsed$changes","addr","messageString","parsed","parse","requestId","changes","deviceId","type","SyncRequestType","push","source","incoming","map","c","mod","applyChangesToLocalDB","send","SyncResponseType","ack","publish","pull","params","getFilteredChanges","for","nack","startTinySynqServer","listenSocket","port","Number","TINYSYNQ_WS_PORT","minLevel","TINYSYNQ_LOG_LEVEL","LogLevel","Info","TINYSYNQ_LOG_FORMAT","listen","socket","info","threadId","close","us_listen_socket_close","lib"],"mappings":"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"}