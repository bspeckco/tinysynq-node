{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/env.ts","../src/lib/server.ts","../src/index.ts"],"sourcesContent":["import DB from 'better-sqlite3';\nimport { TinySynqSync, TinySynqOptions, createHybridAdapter } from '@bspeckco/tinysynq-lib';\n\n/**\n * The main class for managing SQLite3 synchronisation.\n *\n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n *\n * @public\n */\nexport class TinySynq extends TinySynqSync {\n\n  /**\n   * Configure new TinySynq instance.\n   *\n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    // If adapter not provided, create one from better-sqlite3\n    if (!opts.adapter) {\n      if (!opts.filePath && !opts.sqlite3) {\n        throw new Error('No DB filePath or connection provided');\n      }\n\n      const db = opts.sqlite3 || new DB(opts.filePath!);\n\n      // Set WAL mode before creating adapter\n      if (opts.wal !== false) {\n        db.pragma('journal_mode = WAL');\n      }\n\n      const adapter = createHybridAdapter({\n        driver: 'better-sqlite3',\n        db,\n        closeOnDispose: !opts.sqlite3, // Only close if we created it\n      });\n\n      opts = { ...opts, adapter };\n    }\n\n    super(opts);\n  }\n}\n","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, bootstrapTinySynqSync } from \"@bspeckco/tinysynq-lib\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions });\n  const ts = new TinySynq(config);\n\n  return bootstrapTinySynqSync({\n    ts,\n    options: config,\n    logger: log,\n  });\n};\n\nexport default initTinySynq;\n","import 'dotenv/config'\n\ntype TinySynqEnv = typeof process.env & {\n  TINYSYNQ_WS_HOST: number;\n  TINYSYNQ_WS_PORT: number;\n  TINYSYNQ_HTTP_HOST: number;\n  TINYSYNQ_HTTP_PORT: number;\n  TINYSYNQ_LOG_LEVEL: number;\n  TINYSYNQ_LOG_FORMAT: \"json\" | \"pretty\" | \"hidden\";\n};\n\nexport const env = process.env as TinySynqEnv;","import { env } from './env.js';\nimport * as uWS from 'uWebSockets.js';\nimport { threadId } from 'worker_threads';\nimport { TinySynq } from './tinysynq.class.js';\nimport { Change, LogLevel, SyncRequestType, SyncResponseType } from '@bspeckco/tinysynq-lib';\nimport { ILogObj, ISettingsParam, Logger } from 'tslog';\n\n\ninterface TSTemplatedApp extends uWS.TemplatedApp {\n  ts: TinySynq;\n  log: Logger<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>;\n}\n\nexport type SocketRequestType = SyncRequestType; \n\nexport interface TSServerParams {\n  ts: TinySynq;\n  port?: number;\n  logOptions: ISettingsParam<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>; // Handles auth during upgrade (headers/cookies)\n}\n\n// Represents incoming push/pull requests (from tinysynq-lib)\nexport interface TSSocketRequestParams {\n  changes?: Change[];\n  requestId?: string;\n  source?: string;\n  type: SyncRequestType; // From lib (push/pull)\n  since: string;\n  checkpoint: number;\n}\n\n// User data attached to each WebSocket connection\ninterface WebSocketUserData {\n  remoteAddress: string;\n  // No longer need isAuthenticated flag\n  [key: string]: any; // Allow storing arbitrary data from auth functions\n}\n\nfunction arrayBufferToString(arrBuff: ArrayBuffer): string {\n  return Buffer.from(arrBuff).toString();\n} \n\nconst app = uWS.App({}) as TSTemplatedApp;\n\napp.ws<WebSocketUserData>('/*', { // Specify UserData type here\n  compression: uWS.SHARED_COMPRESSOR,\n  maxPayloadLength: 16 * 1024 * 1024,\n  idleTimeout: 120,\n  sendPingsAutomatically: true,\n\n  upgrade: async (res, req, context) => {\n    const secWebSocketKey = req.getHeader('sec-websocket-key');\n    const secWebSocketProtocol = req.getHeader('sec-websocket-protocol');\n    const secWebSocketExtensions = req.getHeader('sec-websocket-extensions');\n    const remoteAddress = arrayBufferToString(res.getRemoteAddressAsText());\n\n    res.onAborted(() => {\n      app.log.warn(`Connection aborted for ${remoteAddress}`);\n      res.aborted = true;\n    });\n\n    let userData: WebSocketUserData = { remoteAddress }; // Base user data\n    \n    try {\n      if (app.auth) {\n        // Perform authentication using the provided auth function\n        app.log.debug(`Performing auth for ${remoteAddress}`);\n        const authResult = await app.auth(req);\n\n        if (authResult === true) {\n          app.log.debug(`Auth successful (true) for ${remoteAddress}`);\n          // Proceed to upgrade, userData only contains remoteAddress unless modified by auth fn later\n        } else if (typeof authResult === 'object' && authResult !== null) {\n          app.log.debug(`Auth successful (object) for ${remoteAddress}`, authResult);\n          // Merge returned user data\n          Object.assign(userData, authResult);\n        } else {\n          // Auth failed (false, null, undefined, etc.)\n          app.log.warn(`Auth failed for ${remoteAddress} (result: ${JSON.stringify(authResult)}), denying connection.`);\n          res.cork(() => {\n             res.writeStatus('401 Unauthorized').end();\n          });\n          return; // Stop processing\n        }\n      } else {\n        // No auth function configured, allow connection\n        app.log.trace(`No auth configured, allowing connection for ${remoteAddress}`);\n      }\n\n      // If we reach here, authentication passed or was not required.\n      app.log.debug(`Upgrading connection for ${remoteAddress}, userData:`, userData);\n      if (!res.aborted) {\n        res.cork(() => {\n          res.upgrade(\n            userData,\n            secWebSocketKey,\n            secWebSocketProtocol,\n            secWebSocketExtensions,\n            context\n          );\n        });\n      } else {\n         app.log.warn(`Upgrade aborted for ${remoteAddress} during auth.`);\n      }\n\n    } catch (err: any) {\n      // Error during auth function execution\n      app.log.error(`Auth error during upgrade for ${remoteAddress}: ${err.message}`);\n      if (!res.aborted) {\n        res.cork(() => {\n            res.writeStatus('500 Internal Server Error').end();\n        });\n      }\n    }\n  },\n\n  open: (ws) => {\n    const userData = ws.getUserData();\n    app.log.warn('@Connected!', userData);\n    ws.subscribe('broadcast');\n  },\n\n  message: async (ws, message, isBinary) => {\n    const userData = ws.getUserData();\n    const remoteAddress = userData.remoteAddress;\n    let parsed: any;\n\n    try {\n      // Ensure message is parsed safely\n      try {\n        const messageString = arrayBufferToString(message);\n        parsed = JSON.parse(messageString);\n      } catch (parseError: any) {\n        app.log.warn(`Failed to parse message from ${remoteAddress}: ${parseError.message}`);\n        ws.close(); // Close connection on parse error\n        return;\n      }\n\n      app.log.trace(`Raw message from ${remoteAddress}:`, parsed);\n\n      // --- Handle Authenticated Connections (All connections are considered authenticated here) ---\n      // Ensure the message type is a valid SyncRequestType before proceeding\n      if (typeof parsed.type !== 'string' || !(Object.values(SyncRequestType).includes(parsed.type as SyncRequestType))) {\n        app.log.warn('INVALID_MESSAGE_TYPE received', { parsed, remoteAddress });\n        ws.send(JSON.stringify({ type: SyncResponseType.nack, requestId: parsed?.requestId, message: `Invalid message type: ${parsed?.type}` }));\n        return;\n      }\n\n      const syncRequestParams = parsed as TSSocketRequestParams;\n      app.log.warn('@syncRequestParams', syncRequestParams, '/syncRequestParams');\n      const { requestId } = syncRequestParams;\n      app.log.debug(`@Message (${remoteAddress})!`, syncRequestParams.changes, app.ts.deviceId);\n\n      switch(syncRequestParams.type) {\n        case SyncRequestType.push:\n          if (!syncRequestParams.source) {\n            app.log.error('INVALID_SOURCE', {parsed: syncRequestParams, remoteAddress});\n            throw new Error('Invalid source');\n          }  \n          const incoming = syncRequestParams.changes?.map((c: any) => {\n            c.source = syncRequestParams.source;\n            delete c.mod;\n            return c as Change;\n          }) || [];\n          app.log.debug('\\n<<<< INCOMING >>>>\\n', incoming);\n          \n          try {\n            app.ts.applyChangesToLocalDB({changes: incoming});\n          }\n          catch(err) {\n            app.log.error('Error applying changes to local DB', {error: err, changes: incoming});\n            ws.send(JSON.stringify({type: SyncResponseType.nack, requestId, message: 'Error applying changes to local DB'}));\n          }\n\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId}));\n          ws.publish('broadcast', JSON.stringify({changes: incoming, source: syncRequestParams.source}), false);\n          break;\n        case SyncRequestType.pull:\n          app.log.warn('@pull: syncRequestParams', syncRequestParams, '/pull');\n          const params = { ...syncRequestParams } as any;\n          delete params?.type;\n          const changes = await app.ts.getFilteredChanges(syncRequestParams); \n          app.log.debug('@pull: outgoing:', changes);\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId, changes}));\n          break;\n        default:\n          throw new Error(`Invalid request type on connection: '${syncRequestParams.type}'`);\n      }\n      \n    } catch(err: any) {\n      // General error handling for message processing\n      app.log.error(`Top-level message handler error for ${remoteAddress}: ${err.message}`, { error: err, parsed });\n      try {\n         ws.send(JSON.stringify({\n           type: SyncResponseType.nack, \n           requestId: parsed?.requestId,\n           message: `Server error processing message: ${err.message}`\n         }));\n      } catch (sendError: any) {\n          app.log.warn(`Failed to send error NACK to ${remoteAddress}, connection likely closed: ${sendError.message}`);\n      }\n       ws.close();\n    }\n  },\n\n});\n\nexport interface TinySynqServerControl {\n  app: TSTemplatedApp;\n  close: () => void;\n}\n\nexport const startTinySynqServer = (params: TSServerParams): TinySynqServerControl => {\n  app.log = new Logger({\n    name:'tinysynq-node-ws',\n    minLevel: params.logOptions.minLevel || Number(env.TINYSYNQ_LOG_LEVEL) || LogLevel.Info,\n    type: env.TINYSYNQ_LOG_FORMAT ?? 'json',\n    ...(params.logOptions || {})\n  });\n  app.log.info(`TinySynq server starting...`);\n  \n  let listenSocket: uWS.us_listen_socket | null = null;\n  const port = params.port || Number(env.TINYSYNQ_WS_PORT) || 7174;\n  \n  app.ts = params.ts;\n  app.auth = params.auth;\n\n  app.listen(port, socket => {\n    listenSocket = socket;\n    if (listenSocket) {\n      app.log.info(`TinySynq server listening on port ${port} from thread ${threadId}`);\n    } else {\n      app.log.error(`Failed to listen on port ${port} from thread ${threadId}`);\n    }\n  });\n\n  return {\n    app,\n    close: () => {\n      if (listenSocket) {\n        app.log.info(`Closing server socket on port ${port}`);\n        uWS.us_listen_socket_close(listenSocket);\n        listenSocket = null;\n      } else {\n        app.log.warn(`Attempted to close server, but socket was not listening or already closed.`);\n      }\n    }\n  };\n}\n","import lib from './lib/index.js';\nimport { startTinySynqServer } from './lib/server.js';\n\nexport default { startTinySynqServer, initTinySynq: lib };\n\nexport type { \n  BetterSqlite3Instance,\n} from './lib/types.js';\n\nexport type {\n  SyncableTable,\n  TinySynqOptions,\n  GetTableIdColumnParams,\n  Change,\n  QueryParams,\n} from '@bspeckco/tinysynq-lib';\n\nexport type {\n  TinySynq,\n} from './lib/tinysynq.class.js';\n"],"names":["TinySynq","TinySynqSync","constructor","opts","adapter","filePath","sqlite3","Error","db","DB","wal","pragma","createHybridAdapter","driver","closeOnDispose","initTinySynq","config","tables","preInit","postInit","logOptions","debug","length","log","Logger","name","ts","bootstrapTinySynqSync","options","logger","env","process","arrayBufferToString","arrBuff","Buffer","from","toString","app","uWS","App","ws","compression","SHARED_COMPRESSOR","maxPayloadLength","idleTimeout","sendPingsAutomatically","upgrade","res","req","context","secWebSocketKey","getHeader","secWebSocketProtocol","secWebSocketExtensions","remoteAddress","getRemoteAddressAsText","onAborted","warn","aborted","userData","auth","authResult","Object","assign","JSON","stringify","cork","writeStatus","end","trace","err","error","message","open","getUserData","subscribe","isBinary","_syncRequestParams$ch","parsed","messageString","parse","parseError","close","type","values","SyncRequestType","includes","_parsed","_parsed2","send","SyncResponseType","nack","requestId","syncRequestParams","changes","deviceId","push","source","incoming","map","c","mod","applyChangesToLocalDB","ack","publish","pull","params","getFilteredChanges","_parsed3","sendError","startTinySynqServer","_env$TINYSYNQ_LOG_FOR","minLevel","Number","TINYSYNQ_LOG_LEVEL","LogLevel","Info","TINYSYNQ_LOG_FORMAT","info","listenSocket","port","TINYSYNQ_WS_PORT","listen","socket","threadId","us_listen_socket_close","lib"],"mappings":"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"}