{"version":3,"file":"tinysynq.module.js","sources":["../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/env.ts","../src/lib/server.ts","../src/index.ts"],"sourcesContent":["import DB from 'better-sqlite3';\nimport { TinySynqSync, TinySynqOptions, createHybridAdapter } from '@bspeckco/tinysynq-lib';\n\n/**\n * The main class for managing SQLite3 synchronisation.\n *\n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n *\n * @public\n */\nexport class TinySynq extends TinySynqSync {\n\n  /**\n   * Configure new TinySynq instance.\n   *\n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    // If adapter not provided, create one from better-sqlite3\n    if (!opts.adapter) {\n      if (!opts.filePath && !opts.sqlite3) {\n        throw new Error('No DB filePath or connection provided');\n      }\n\n      const db = opts.sqlite3 || new DB(opts.filePath!);\n\n      // Set WAL mode before creating adapter\n      if (opts.wal !== false) {\n        db.pragma('journal_mode = WAL');\n      }\n\n      const adapter = createHybridAdapter({\n        driver: 'better-sqlite3',\n        db,\n        closeOnDispose: !opts.sqlite3, // Only close if we created it\n      });\n\n      opts = { ...opts, adapter };\n    }\n\n    super(opts);\n  }\n}\n","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, bootstrapTinySynqSync } from \"@bspeckco/tinysynq-lib\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions });\n  const ts = new TinySynq(config);\n\n  return bootstrapTinySynqSync({\n    ts,\n    options: config,\n    logger: log,\n  });\n};\n\nexport default initTinySynq;\n","import 'dotenv/config'\n\ntype TinySynqEnv = typeof process.env & {\n  TINYSYNQ_WS_HOST: number;\n  TINYSYNQ_WS_PORT: number;\n  TINYSYNQ_HTTP_HOST: number;\n  TINYSYNQ_HTTP_PORT: number;\n  TINYSYNQ_LOG_LEVEL: number;\n  TINYSYNQ_LOG_FORMAT: \"json\" | \"pretty\" | \"hidden\";\n};\n\nexport const env = process.env as TinySynqEnv;","import { env } from './env.js';\nimport * as uWS from 'uWebSockets.js';\nimport { threadId } from 'worker_threads';\nimport { TinySynq } from './tinysynq.class.js';\nimport { Change, LogLevel, SyncRequestType, SyncResponseType, TinySynqTelemetryEmitter } from '@bspeckco/tinysynq-lib';\nimport { ILogObj, ISettingsParam, Logger } from 'tslog';\n\n\ninterface TSTemplatedApp extends uWS.TemplatedApp {\n  ts: TinySynq;\n  log: Logger<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>;\n  telemetry?: TinySynqTelemetryEmitter;\n}\n\nexport type SocketRequestType = SyncRequestType; \n\nexport interface TSServerParams {\n  ts: TinySynq;\n  port?: number;\n  logOptions: ISettingsParam<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>; // Handles auth during upgrade (headers/cookies)\n  telemetry?: TinySynqTelemetryEmitter;\n}\n\n// Represents incoming push/pull requests (from tinysynq-lib)\nexport interface TSSocketRequestParams {\n  changes?: Change[];\n  requestId?: string;\n  source?: string;\n  type: SyncRequestType; // From lib (push/pull)\n  since: string;\n  checkpoint: number;\n}\n\n// User data attached to each WebSocket connection\ninterface WebSocketUserData {\n  remoteAddress: string;\n  // No longer need isAuthenticated flag\n  [key: string]: any; // Allow storing arbitrary data from auth functions\n}\n\nfunction arrayBufferToString(arrBuff: ArrayBuffer): string {\n  return Buffer.from(arrBuff).toString();\n} \n\nconst app = uWS.App({}) as TSTemplatedApp;\n\napp.ws<WebSocketUserData>('/*', { // Specify UserData type here\n  compression: uWS.SHARED_COMPRESSOR,\n  maxPayloadLength: 16 * 1024 * 1024,\n  idleTimeout: 120,\n  sendPingsAutomatically: true,\n\n  upgrade: async (res, req, context) => {\n    const secWebSocketKey = req.getHeader('sec-websocket-key');\n    const secWebSocketProtocol = req.getHeader('sec-websocket-protocol');\n    const secWebSocketExtensions = req.getHeader('sec-websocket-extensions');\n    const remoteAddress = arrayBufferToString(res.getRemoteAddressAsText());\n\n    res.onAborted(() => {\n      app.log.warn(`Connection aborted for ${remoteAddress}`);\n      res.aborted = true;\n    });\n\n    let userData: WebSocketUserData = { remoteAddress }; // Base user data\n    \n    try {\n      if (app.auth) {\n        // Perform authentication using the provided auth function\n        app.log.debug(`Performing auth for ${remoteAddress}`);\n        const authResult = await app.auth(req);\n\n        if (authResult === true) {\n          app.log.debug(`Auth successful (true) for ${remoteAddress}`);\n          // Proceed to upgrade, userData only contains remoteAddress unless modified by auth fn later\n        } else if (typeof authResult === 'object' && authResult !== null) {\n          app.log.debug(`Auth successful (object) for ${remoteAddress}`, authResult);\n          // Merge returned user data\n          Object.assign(userData, authResult);\n        } else {\n          // Auth failed (false, null, undefined, etc.)\n          app.log.warn(`Auth failed for ${remoteAddress} (result: ${JSON.stringify(authResult)}), denying connection.`);\n          res.cork(() => {\n             res.writeStatus('401 Unauthorized').end();\n          });\n          return; // Stop processing\n        }\n      } else {\n        // No auth function configured, allow connection\n        app.log.trace(`No auth configured, allowing connection for ${remoteAddress}`);\n      }\n\n      // If we reach here, authentication passed or was not required.\n      app.log.debug(`Upgrading connection for ${remoteAddress}, userData:`, userData);\n      if (!res.aborted) {\n        res.cork(() => {\n          res.upgrade(\n            userData,\n            secWebSocketKey,\n            secWebSocketProtocol,\n            secWebSocketExtensions,\n            context\n          );\n        });\n      } else {\n         app.log.warn(`Upgrade aborted for ${remoteAddress} during auth.`);\n      }\n\n    } catch (err: any) {\n      // Error during auth function execution\n      app.log.error(`Auth error during upgrade for ${remoteAddress}: ${err.message}`);\n      if (!res.aborted) {\n        res.cork(() => {\n            res.writeStatus('500 Internal Server Error').end();\n        });\n      }\n    }\n  },\n\n  open: (ws) => {\n    const userData = ws.getUserData();\n    app.log.warn('@Connected!', userData);\n    app.telemetry?.emit({\n      type: 'hub.connection.open',\n      data: {\n        remoteAddress: userData.remoteAddress,\n      },\n    });\n    ws.subscribe('broadcast');\n  },\n\n  message: async (ws, message, isBinary) => {\n    const userData = ws.getUserData();\n    const remoteAddress = userData.remoteAddress;\n    let parsed: any;\n\n    try {\n      // Ensure message is parsed safely\n      try {\n        const messageString = arrayBufferToString(message);\n        parsed = JSON.parse(messageString);\n      } catch (parseError: any) {\n        app.log.warn(`Failed to parse message from ${remoteAddress}: ${parseError.message}`);\n        ws.close(); // Close connection on parse error\n        return;\n      }\n\n      app.log.trace(`Raw message from ${remoteAddress}:`, parsed);\n      app.telemetry?.emit({\n        type: 'hub.message.received',\n        data: {\n          remoteAddress,\n          requestId: parsed?.requestId,\n          type: parsed?.type,\n        },\n      });\n\n      // --- Handle Authenticated Connections (All connections are considered authenticated here) ---\n      // Ensure the message type is a valid SyncRequestType before proceeding\n      if (typeof parsed.type !== 'string' || !(Object.values(SyncRequestType).includes(parsed.type as SyncRequestType))) {\n        app.log.warn('INVALID_MESSAGE_TYPE received', { parsed, remoteAddress });\n        ws.send(JSON.stringify({ type: SyncResponseType.nack, requestId: parsed?.requestId, message: `Invalid message type: ${parsed?.type}` }));\n        return;\n      }\n\n      const syncRequestParams = parsed as TSSocketRequestParams;\n      app.log.warn('@syncRequestParams', syncRequestParams, '/syncRequestParams');\n      const { requestId } = syncRequestParams;\n      app.log.debug(`@Message (${remoteAddress})!`, syncRequestParams.changes, app.ts.deviceId);\n\n      switch(syncRequestParams.type) {\n        case SyncRequestType.push:\n          if (!syncRequestParams.source) {\n            app.log.error('INVALID_SOURCE', {parsed: syncRequestParams, remoteAddress});\n            throw new Error('Invalid source');\n          }  \n          const incoming = syncRequestParams.changes?.map((c: any) => {\n            c.source = syncRequestParams.source;\n            delete c.mod;\n            return c as Change;\n          }) || [];\n          app.log.debug('\\n<<<< INCOMING >>>>\\n', incoming);\n          app.telemetry?.emit({\n            type: 'hub.push.received',\n            data: {\n              remoteAddress,\n              requestId,\n              changeCount: incoming.length,\n              source: syncRequestParams.source,\n            },\n          });\n          \n          try {\n            app.ts.applyChangesToLocalDB({changes: incoming});\n          }\n          catch(err) {\n          app.log.error('Error applying changes to local DB', {error: err, changes: incoming});\n          ws.send(JSON.stringify({type: SyncResponseType.nack, requestId, message: 'Error applying changes to local DB'}));\n          app.telemetry?.emit({\n            type: 'hub.push.error',\n            data: {\n              remoteAddress,\n              requestId,\n              changeCount: incoming.length,\n              error: err instanceof Error ? err.message : String(err),\n            },\n          });\n          }\n\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId}));\n          ws.publish('broadcast', JSON.stringify({changes: incoming, source: syncRequestParams.source}), false);\n          app.telemetry?.emit({\n            type: 'hub.push.applied',\n            data: {\n              remoteAddress,\n              requestId,\n              changeCount: incoming.length,\n              source: syncRequestParams.source,\n            },\n          });\n          break;\n        case SyncRequestType.pull:\n          app.log.warn('@pull: syncRequestParams', syncRequestParams, '/pull');\n          const params = { ...syncRequestParams } as any;\n          delete params?.type;\n          const changes = await app.ts.getFilteredChanges(syncRequestParams); \n          app.log.debug('@pull: outgoing:', changes);\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId, changes}));\n          app.telemetry?.emit({\n            type: 'hub.pull.sent',\n            data: {\n              remoteAddress,\n              requestId,\n              changeCount: Array.isArray(changes) ? changes.length : 0,\n              since: syncRequestParams.since,\n              checkpoint: syncRequestParams.checkpoint,\n            },\n          });\n          break;\n        default:\n          throw new Error(`Invalid request type on connection: '${syncRequestParams.type}'`);\n      }\n      \n    } catch(err: any) {\n      // General error handling for message processing\n      app.log.error(`Top-level message handler error for ${remoteAddress}: ${err.message}`, { error: err, parsed });\n      try {\n         ws.send(JSON.stringify({\n           type: SyncResponseType.nack, \n           requestId: parsed?.requestId,\n           message: `Server error processing message: ${err.message}`\n         }));\n      } catch (sendError: any) {\n          app.log.warn(`Failed to send error NACK to ${remoteAddress}, connection likely closed: ${sendError.message}`);\n      }\n      app.telemetry?.emit({\n        type: 'hub.message.error',\n        data: {\n          remoteAddress,\n          requestId: parsed?.requestId,\n          error: err instanceof Error ? err.message : String(err),\n        },\n      });\n       ws.close();\n    }\n  },\n  close: (ws, code, message) => {\n    const userData = ws.getUserData();\n    app.telemetry?.emit({\n      type: 'hub.connection.close',\n      data: {\n        remoteAddress: userData.remoteAddress,\n        code,\n        message: Buffer.from(message).toString(),\n      },\n    });\n  }\n\n});\n\nexport interface TinySynqServerControl {\n  app: TSTemplatedApp;\n  close: () => void;\n}\n\nexport const startTinySynqServer = (params: TSServerParams): TinySynqServerControl => {\n  app.log = new Logger({\n    name:'tinysynq-node-ws',\n    minLevel: params.logOptions.minLevel || Number(env.TINYSYNQ_LOG_LEVEL) || LogLevel.Info,\n    type: env.TINYSYNQ_LOG_FORMAT ?? 'json',\n    ...(params.logOptions || {})\n  });\n  app.log.info(`TinySynq server starting...`);\n  \n  let listenSocket: uWS.us_listen_socket | null = null;\n  const port = params.port || Number(env.TINYSYNQ_WS_PORT) || 7174;\n\n  if (params.telemetry) {\n    params.ts.setTelemetryEmitter(params.telemetry);\n  }\n  app.ts = params.ts;\n  app.auth = params.auth;\n  app.telemetry = params.telemetry;\n\n  app.listen(port, socket => {\n    listenSocket = socket;\n    if (listenSocket) {\n      app.log.info(`TinySynq server listening on port ${port} from thread ${threadId}`);\n    } else {\n      app.log.error(`Failed to listen on port ${port} from thread ${threadId}`);\n    }\n  });\n\n  return {\n    app,\n    close: () => {\n      if (listenSocket) {\n        app.log.info(`Closing server socket on port ${port}`);\n        uWS.us_listen_socket_close(listenSocket);\n        listenSocket = null;\n      } else {\n        app.log.warn(`Attempted to close server, but socket was not listening or already closed.`);\n      }\n    }\n  };\n}\n","import lib from './lib/index.js';\nimport { startTinySynqServer } from './lib/server.js';\n\nexport default { startTinySynqServer, initTinySynq: lib };\n\nexport type { \n  BetterSqlite3Instance,\n} from './lib/types.js';\n\nexport type {\n  SyncableTable,\n  TinySynqOptions,\n  GetTableIdColumnParams,\n  Change,\n  QueryParams,\n} from '@bspeckco/tinysynq-lib';\n\nexport type {\n  TinySynq,\n} from './lib/tinysynq.class.js';\n"],"names":["TinySynq","TinySynqSync","constructor","opts","adapter","filePath","sqlite3","Error","db","DB","wal","pragma","createHybridAdapter","driver","closeOnDispose","initTinySynq","config","tables","preInit","postInit","logOptions","debug","length","log","Logger","name","ts","bootstrapTinySynqSync","options","logger","env","process","arrayBufferToString","arrBuff","Buffer","from","toString","app","uWS","App","ws","compression","SHARED_COMPRESSOR","maxPayloadLength","idleTimeout","sendPingsAutomatically","upgrade","res","req","context","secWebSocketKey","getHeader","secWebSocketProtocol","secWebSocketExtensions","remoteAddress","getRemoteAddressAsText","onAborted","warn","aborted","userData","auth","authResult","Object","assign","JSON","stringify","cork","writeStatus","end","trace","err","error","message","open","_app$telemetry","getUserData","telemetry","emit","type","data","subscribe","isBinary","_syncRequestParams$ch","_app$telemetry3","_app$telemetry5","_app$telemetry6","parsed","_app$telemetry2","_parsed","_parsed2","messageString","parse","parseError","close","requestId","values","SyncRequestType","includes","_parsed3","_parsed4","send","SyncResponseType","nack","syncRequestParams","changes","deviceId","push","source","incoming","map","c","mod","changeCount","applyChangesToLocalDB","_app$telemetry4","String","ack","publish","pull","params","getFilteredChanges","Array","isArray","since","checkpoint","_app$telemetry7","_parsed6","_parsed5","sendError","code","_app$telemetry8","startTinySynqServer","_env$TINYSYNQ_LOG_FOR","minLevel","Number","TINYSYNQ_LOG_LEVEL","LogLevel","Info","TINYSYNQ_LOG_FORMAT","info","listenSocket","port","TINYSYNQ_WS_PORT","setTelemetryEmitter","listen","socket","threadId","us_listen_socket_close","lib"],"mappings":"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"}