import{Logger as e}from"tslog";import n from"better-sqlite3";import{nanoid as t}from"nanoid";function r(e){var n=function(e,n){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof n?n:String(n)}function a(){return a=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function i(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function o(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return i(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?i(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,l;!function(e){e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(s||(s={})),function(e){e[e.Silly=0]="Silly",e[e.Trace=1]="Trace",e[e.Debug=2]="Debug",e[e.Info=3]="Info",e[e.Warn=4]="Warn",e[e.Error=5]="Error",e[e.Fatal=6]="Fatal"}(l||(l={}));var E=/*#__PURE__*/function(){function e(e){var n=e.local,t=e.remote,r=e.localId;this.local=void 0,this.isGreater=!1,this.isLess=!1,this.isWrongOrder=!1,this.remote={},this.localId=void 0,this.local=n,this.remote="string"==typeof t?JSON.parse(t):t,this.localId=r}var n=e.prototype;return n.setRemote=function(e){this.remote=e.remote},n.isConflicted=function(e){var n=this,t=(null==e?void 0:e.remote)||this.remote;return Object.keys(a({},this.local,t)).forEach(function(e){var r=n.local[e]||0,a=t[e]||0;n.isGreater=n.isGreater||r>a,n.isLess=n.isLess||r<a}),this.isGreater&&this.isLess},n.isOutDated=function(){var e=this.remote,n=this.local,t=this.localId;if(!e||!n)throw new Error("Remote vector clock not set");return n[t]>e[t]},n.isOutOfOrder=function(){var e=this.remote,n=this.local,t=this.localId;if(!e||!n)throw new Error("Remote vector clock not set");for(var r=Object.keys(a({},this.local,e)).filter(function(e){return e!==t}),i=0;i<r.length;i++){var o,s,l=r[i],E=Math.abs((null!=(o=n[l])?o:0)-(null!=(s=e[l])?s:0));this.isWrongOrder=E>1}return this.isWrongOrder},n.merge=function(){for(var e,n={},t=o(new Set(Object.keys(this.local).concat(Object.keys(this.remote))));!(e=t()).done;){var r=e.value;n[r]=Math.max(this.local[r]||0,this.remote[r]||0)}return void 0===n[this.localId]&&(n[this.localId]=0),n},e}(),c=["id"];function u(e,n,t){if(!e.s){if(t instanceof d){if(!t.s)return void(t.o=u.bind(null,e,n));1&n&&(n=t.s),t=t.v}if(t&&t.then)return void t.then(u.bind(null,e,n),u.bind(null,e,2));e.s=n,e.v=t;var r=e.o;r&&r(e)}}var d=/*#__PURE__*/function(){function e(){}return e.prototype.then=function(n,t){var r=new e,a=this.s;if(a){var i=1&a?n:t;if(i){try{u(r,1,i(this.v))}catch(e){u(r,2,e)}return r}return this}return this.o=function(e){try{var a=e.v;1&e.s?u(r,1,n?n(a):a):t?u(r,1,t(a)):u(r,2,a)}catch(e){u(r,2,e)}},r},e}(),_=new e({name:"tinysync-web-init",minLevel:l.Info}),T="STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')",m=/*#__PURE__*/function(){function i(t){var r,i;if(this._db=void 0,this._dbPath=void 0,this._deviceId=void 0,this._synqPrefix=void 0,this._synqTables=void 0,this._synqBatchSize=20,this._wal=!0,this.log=void 0,this.utils={strtimeAsISO8601:T,nowAsISO8601:T,utcNowAsISO8601:function(){return new Date((new Date).toUTCString()).toISOString()}},!t.filePath&&!t.sqlite3)throw new Error("No DB filePath or connection provided");var o={};t.tables.forEach(function(e){o[e.name]=e}),this._dbPath=t.filePath||"",this._db=t.sqlite3||void 0,this._synqPrefix=null==(r=t.prefix)?void 0:r.trim().replace(/[^a-z0-9]+$/i,""),this._synqTables=o,this._synqBatchSize=t.batchSize||this._synqBatchSize,this._wal=null!=(i=t.wal)&&i,this.log=new e(a({name:"tinysync-node",minLevel:l.Debug,type:"json",maskValuesOfKeys:["password","encryption_key"],hideLogPositionForProduction:!0},t.logOptions||{})),this.db||(this._db=new n(this.dbPath),this.db.pragma("journal_mode = WAL"))}var s,m,f=i.prototype;return f.getTableIdColumn=function(e){var n;return null==(n=this.synqTables[e.table_name])?void 0:n.id},f.setDeviceId=function(){var e,n,r;try{r=this.runQuery({sql:"SELECT meta_value FROM "+this.synqPrefix+"_meta WHERE meta_name = 'device_id'"})[0]}catch(e){this.log.warn("Couldn't retrieve device ID")}if(_.warn("@device_id",r),null==(e=r)||!e.meta_value){var a=this.runQuery({sql:"INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value) VALUES (?,?) RETURNING *",values:["device_id",t(16)]});_.warn("@created record for device_id:",a),r=a[0]}this._deviceId=null==(n=r)?void 0:n.meta_value},f.run=function(e){var n=e.sql,t=e.values,r=Math.ceil(1e6*Math.random());this.log.debug("@run",r,n,t,"/");try{var a=this.db.prepare(n).run(t||[]);return this.log.debug({quid:r,result:a}),a}catch(e){return this.log.error(r,e),e}},f.runMany=function(e){var n=e.sql,t=e.values,r=Math.ceil(1e6*Math.random());this.log.debug("@runMany",r,n,t,"/");try{for(var a,i=this.db.prepare(n),s=o(t);!(a=s()).done;)i.run(a.value);this.log.debug({quid:r,result:"done"})}catch(e){return this.log.error(r,e),e}},f.runQuery=function(e){var n=e.sql,t=e.values,r=Math.ceil(1e6*Math.random());this.log.debug("@runQuery",{quid:r,sql:n,values:t});try{var a=this.db.prepare(n).all(t||[]);return this.log.debug({quid:r,result:a}),a}catch(e){return this.log.error(r,e),e}},f.getDeviceId=function(){return this._deviceId?this._deviceId:this.runQuery({sql:"\n        SELECT meta_value FROM "+this.synqPrefix+"_meta\n        WHERE meta_name = 'device_id'"})[0].meta_value},f.getLastSync=function(){var e,n=this.runQuery({sql:"\n        SELECT meta_value FROM "+this.synqPrefix+"_meta\n        WHERE meta_name = 'last_local_sync'"});return this.log.trace("@getLastSync",n[0]),null==(e=n[0])?void 0:e.meta_value},f.getChanges=function(e){var n=(null==e?void 0:e.lastLocalSync)||this.getLastSync(),t=(e||{}).columns,r=void 0===t?[]:t;this.log.debug("@getChanges",n);var a="";n&&(a="WHERE c.modified > ?");var i="\n      SELECT "+(r.map(function(e){return e.replace(/[^*._a-z0-9]+/gi,"")}).join(",")||"*")+"\n      FROM "+this._synqPrefix+"_changes c\n      INNER JOIN "+this._synqPrefix+"_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      "+a+"\n      ORDER BY c.modified ASC\n    ";console.log(i);var o=n?[n]:[];return this.log.debug(i,o),this.runQuery({sql:i,values:o})},f.getChangesSinceLastSync=function(e){var n=this.getLastSync()||void 0;return this.getChanges(a({},e,{lastLocalSync:n}))},f.enableDebug=function(){return this.run({sql:"\n      INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;"})},f.disableDebug=function(){return this.run({sql:"\n      INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;"})},f.clearDebugData=function(){this.run({sql:"DELETE FROM "+this._synqPrefix+"_dump"}),this.run({sql:"UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = "+this._synqPrefix+"_dump"})},f.enableTriggers=function(){return this.run({sql:"\n      INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');"})},f.disableTriggers=function(){return this.run({sql:"\n      INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');"})},f.beginTransaction=function(){var e="SP"+Date.now();return this.run({sql:"SAVEPOINT "+e+";"}),e},f.commitTransaction=function(e){return this.run({sql:"RELEASE SAVEPOINT "+e.savepoint+";"})},f.rollbackTransaction=function(e){return this.run({sql:"ROLLBACK TRANSACTION TO SAVEPOINT "+e.savepoint+";"})},f.getRecord=function(e){var n=e.table_name,t=e.row_id,r=this.getTableIdColumn({table_name:n}),a=this.runQuery({sql:"SELECT * FROM "+n+" WHERE "+r+" = ?",values:[t]});return this.log.debug("@getRecord",a),a[0]},f.getById=function(e){return this.getRecord({table_name:e.table_name,row_id:e.row_id})},f.insertRecordMeta=function(e){var n=e.change,t=e.vclock,r={table_name:n.table_name,row_id:n.row_id,mod:t[this._deviceId]||0,vclock:JSON.stringify(t)};return this.runQuery({sql:"\n      INSERT INTO "+this._synqPrefix+"_record_meta (table_name, row_id, mod, vclock)\n      VALUES (:table_name, :row_id, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET mod = :mod, vclock = :vclock\n      RETURNING *\n      ",values:r})},f.getRecordMeta=function(e){var n=e.table_name,t=e.row_id;return this.db.prepare("\n    SELECT *\n    FROM "+this.synqPrefix+"_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id").get({table_name:n,row_id:t})},f.getPending=function(){return this.runQuery({sql:"\n    SELECT *\n    FROM "+this._synqPrefix+"_pending\n    ORDER BY id ASC\n    "})},f.processOutOfOrderChange=function(e){var n=e.change,t=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n.indexOf(t=i[r])>=0||(a[t]=e[t]);return a}(n,c),r=this.createInsertFromSystemObject({data:t,table_name:this._synqPrefix+"_pending"});this.log.trace("@processOutOfOrderChange\n",r,n);var i=a({},t);i.vclock=JSON.stringify(t.vclock);var o=this.runQuery({sql:r,values:i});return this.log.trace("@processOutOfOrderChange\n",{res:o}),o},f.processConflictedChange=function(e){var n=e.record,t=e.change,r=this.getRecordMeta(a({},t));return this.log.trace("<<<@ processConflictedChange LLW @>>>",t.id,t.table_name,t.row_id,{record:n,localMeta:r,change:t}),t.modified>r.modified?(this.log.trace("<!> INTEGRATING REMOTE",t.id,t.table_name,t.row_id),!0):(this.log.warn("<!> KEEPING LOCAL",t.id,t.table_name,t.row_id),!1)},f.preProcessChange=function(e){var n=e.change,t=e.restore,r="unknown",a=!1,i=r,o=this.deviceId,s=n.table_name,l=n.row_id,c=n.vclock,u=void 0===c?{}:c,d=this.getRecord({table_name:s,row_id:l}),_=this.getRecordMeta({table_name:s,row_id:l}),T=null!=_&&_.vclock?JSON.parse(_.vclock):{},m={},f=new E({local:T,remote:u,localId:o}),h=!1,v=!1,I=!1;return t||d||"INSERT"===n.operation?!t&&d&&T&&T[o]||(m=n.vclock):(i="update before insert",this.processOutOfOrderChange({change:n})),t?(a=!0,i="restoration",m=f.merge()):(h=f.isOutOfOrder())?(i="received out of order",this.processOutOfOrderChange({change:n})):(v=f.isConflicted())?(a=this.processConflictedChange({record:d,change:n}))?m=f.merge():i="concurrent writes":(I=f.isOutDated())?i="stale":i===r&&(a=!0,i="",m=f.merge()),this.log.debug({table_name:s,row_id:l,conflicted:v,displaced:h,stale:I}),{valid:a,reason:i,vclock:m,checks:{stale:I,displaced:h,conflicted:v}}},f.createInsertFromObject=function(e){var n=e.data,t=e.table_name,r=Object.keys(n).join(","),a=this._synqTables[t].editable,i=Object.keys(n).filter(function(e){return a.includes(e)}).map(function(e){return e+" = :"+e}).join(",");if(!i)throw new Error("No changes availble");return"\n      INSERT INTO "+t+" ("+r+")\n      VALUES ("+Object.keys(n).map(function(e){return":"+e}).join(",")+")\n      ON CONFLICT DO UPDATE SET "+i+"\n      RETURNING *;"},f.createInsertFromSystemObject=function(e){var n=e.data,t=e.table_name;this.log.silly("@createInsert...",{data:n});var r=Object.keys(n).join(","),a=Object.keys(n).map(function(e){return e+" = :"+e}).join(",");if(!a)throw new Error("No changes availble");return"\n      INSERT INTO "+t+" ("+r+")\n      VALUES ("+Object.keys(n).map(function(e){return":"+e}).join(",")+")\n      ON CONFLICT DO UPDATE SET "+a+"\n      RETURNING *;"},f.updateLastSync=function(e){var n=e.change,t=this.db.prepare("INSERT OR REPLACE INTO "+this.synqPrefix+"_meta (meta_name, meta_value) VALUES(:name, :value)");this.db.transaction(function(e){for(var n,r=o(e);!(n=r()).done;)t.run(n.value)})([{name:"last_local_sync",value:"STRFTIME('%Y-%m-%d %H:%M:%f','NOW')"},{name:"last_sync",value:n.id}])},f.applyChange=function(e){var n=e.change,t=e.restore,r=e.savepoint;try{var a=this;return Promise.resolve(function(e,r){try{var i=function(){function e(){a.updateLastSync({change:n});var e=a.insertRecordMeta({change:n,vclock:r.vclock});a.log.silly({updatedRecordMeta:e})}var r=a.preProcessChange({change:n,restore:t});if(!r.valid)return a.log.warn(r),void a.updateLastSync({change:n});var i,o=a.synqTables[n.table_name];if(!n.data)throw new Error("Cannot perform update with empty data:\n"+JSON.stringify(n,null,2));try{i=JSON.parse(n.data)}catch(e){throw a.log.debug(n),new Error("Invalid data for insert or update")}if(!o)throw new Error("Unable to find table "+n.table_name);a.log.silly("@applyChange",{change:n,table:o,changeStatus:r});var s=function(e,n){var t,r=-1;e:{for(var a=0;a<n.length;a++){var i=n[a][0];if(i){var o=i();if(o&&o.then)break e;if(o===e){r=a;break}}else r=a}if(-1!==r){do{for(var s=n[r][1];!s;)r++,s=n[r][1];var l=s();if(l&&l.then){t=!0;break e}var E=n[r][2];r++}while(E&&!E());return l}}var c=new d,_=u.bind(null,c,2);return(t?l.then(T):o.then(function t(o){for(;;){if(o===e){r=a;break}if(++a===n.length){if(-1!==r)break;return void u(c,1,l)}if(i=n[a][0]){if((o=i())&&o.then)return void o.then(t).then(void 0,_)}else r=a}do{for(var s=n[r][1];!s;)r++,s=n[r][1];var l=s();if(l&&l.then)return void l.then(T).then(void 0,_);var E=n[r][2];r++}while(E&&!E());u(c,1,l)})).then(void 0,_),c;function T(e){for(;;){var t=n[r][2];if(!t||t())break;r++;for(var a=n[r][1];!a;)r++,a=n[r][1];if((e=a())&&e.then)return void e.then(T).then(void 0,_)}u(c,1,e)}}(n.operation,[[function(){return"INSERT"}],[function(){return"UPDATE"},function(){var e=a.createInsertFromObject({data:i,table_name:n.table_name});return Promise.resolve(a.run({sql:e,values:i})).then(function(){})}],[function(){return"DELETE"},function(){var e="DELETE FROM "+n.table_name+" WHERE "+o.id+" = ?";return a.log.warn(">>> DELETE SQL <<<",e,n.row_id),Promise.resolve(a.run({sql:e,values:[n.row_id]})).then(function(){})}]]);return s&&s.then?s.then(e):e()}()}catch(e){return r(e)}return i&&i.then?i.then(void 0,r):i}(0,function(e){return Promise.resolve(a.rollbackTransaction({savepoint:r})).then(function(){throw a.log.error("Error applying change: "+e+". Rolled back."),e})}))}catch(e){return Promise.reject(e)}},f.applyChangesToLocalDB=function(e){var n=e.changes,t=e.restore,r=void 0!==t&&t;this.disableTriggers();for(var a=0;a<n.length;a+=this.synqBatchSize){var i=n.slice(a,a+this.synqBatchSize),s=this.beginTransaction();try{for(var l,E=o(i);!(l=E()).done;)this.applyChange({change:l.value,restore:r,savepoint:s});this.commitTransaction({savepoint:s})}catch(e){this.rollbackTransaction({savepoint:s}),this.log.error("Transaction failed, changes rolled back: "+e)}}this.enableTriggers(),this.log.silly("Applied "+n.length+" change(s)")},f.tablesReady=function(){this.enableTriggers()},s=i,(m=[{key:"db",get:function(){return this._db}},{key:"dbPath",get:function(){return this._dbPath}},{key:"deviceId",get:function(){return this._deviceId}},{key:"synqDbId",get:function(){return this._deviceId}},{key:"synqPrefix",get:function(){return this._synqPrefix}},{key:"synqTables",get:function(){return this._synqTables}},{key:"synqBatchSize",get:function(){return this._synqBatchSize}},{key:"wal",get:function(){return this._wal}}])&&function(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,r(a.key),a)}}(s.prototype,m),Object.defineProperty(s,"prototype",{writable:!1}),i}(),f=function(n){var t=n.tables,r=n.preInit,i=n.postInit,s=n.logOptions,l=n.debug;if(null==t||!t.length)throw new Error("Syncable table data required");var E=new e(a({name:"tinysync-setup"},s)),c=new m(n),u=function(e){var n=e.table,t=e.remove,r=void 0!==t&&t?"OLD":"NEW",a="\n    INSERT INTO "+c.synqPrefix+"_record_meta (table_name, row_id, mod, vclock)\n    SELECT table_name, row_id, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '"+n.name+"' as table_name,\n        "+r+"."+n.id+" as row_id, \n        IFNULL(json_extract(vclock,'$."+c.deviceId+"'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$."+c.deviceId+"', IFNULL(json_extract(vclock,'$."+c.deviceId+"'), 0) + 1) as vclock\n      FROM "+c.synqPrefix+"_record_meta\n      WHERE table_name = '"+n.name+"'\n      AND row_id = "+r+"."+n.id+"\n      UNION\n      SELECT 0 as peg, '"+n.name+"' as table_name, "+r+"."+n.id+" as row_id, 1, json_object('"+c.deviceId+"', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      mod = json_extract(excluded.vclock,'$."+c.deviceId+"'),\n      vclock = json_extract(excluded.vclock,'$')\n    ;";return E.silly(a),a},d=function(e){var n=e.table;E.debug("Setting up triggers for",n.name);var t=c.runQuery({sql:"\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('"+n.name+"');"})[0];E.silly("@jsonObject",JSON.stringify(t,null,2)),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_after_insert_"+n.name}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_after_update_"+n.name}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_after_delete_"+n.name});var r="\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_after_insert_"+n.name+"\n      AFTER INSERT ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_changes (table_name, row_id, operation, data)\n        VALUES ('"+n.name+"', NEW."+n.id+", 'INSERT', "+t.jo+");\n\n        "+u({table:n})+"\n      END;";c.run({sql:r}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_after_update_"+n.name+"\n      AFTER UPDATE ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_changes (table_name, row_id, operation, data)\n        VALUES ('"+n.name+"', NEW."+n.id+", 'UPDATE', "+t.jo+");\n\n        "+u({table:n})+"\n      END;"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_after_delete_"+n.name+"\n      AFTER DELETE ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_changes (table_name, row_id, operation) VALUES ('"+n.name+"', OLD."+n.id+", 'DELETE');\n        \n        "+u({table:n,remove:!0})+"\n      END;"}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_after_insert_"+n.name}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_after_update_"+n.name}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_after_delete_"+n.name}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_before_insert_record_meta"}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_after_insert_record_meta"}),c.run({sql:"DROP TRIGGER IF EXISTS "+c.synqPrefix+"_dump_after_update_record_meta"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_after_insert_"+n.name+"\n      AFTER INSERT ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data)\n        VALUES ('"+n.name+"', 'INSERT', "+t.jo+");\n      END;"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_after_update_"+n.name+"\n      AFTER UPDATE ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data) VALUES ('"+n.name+"', 'UPDATE', "+t.jo+");\n      END;"});var a=t.jo.replace(/NEW/g,"OLD");c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_after_delete_"+n.name+"\n      AFTER DELETE ON "+n.name+"\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data) VALUES ('"+n.name+"', 'DELETE', "+a+");\n      END;"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_before_insert_record_meta\n      BEFORE INSERT ON "+c.synqPrefix+"_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_after_insert_record_meta\n      AFTER INSERT ON "+c.synqPrefix+"_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data)\n        VALUES ('"+n.name+"', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;"}),c.run({sql:"\n      CREATE TRIGGER IF NOT EXISTS "+c.synqPrefix+"_dump_after_update_record_meta\n      AFTER UPDATE ON "+c.synqPrefix+"_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM "+c.synqPrefix+"_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO "+c.synqPrefix+"_dump (table_name, operation, data)\n        VALUES ('"+n.name+"', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;"})};if(c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );"}),c.run({sql:"CREATE INDEX IF NOT EXISTS "+c.synqPrefix+"_change_modified_idx ON "+c.synqPrefix+"_changes(modified)"}),c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );"}),c.run({sql:"CREATE INDEX IF NOT EXISTS "+c.synqPrefix+"_pending_table_row_idx ON "+c.synqPrefix+"_pending(table_name, row_id)"}),c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );"}),c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );"}),c.run({sql:"CREATE UNIQUE INDEX IF NOT EXISTS "+c.synqPrefix+"_record_meta_idx ON "+c.synqPrefix+"_record_meta(table_name, row_id)"}),c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  "}),c.run({sql:"\n    CREATE TABLE IF NOT EXISTS "+c.synqPrefix+"_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  "}),c.run({sql:"CREATE INDEX IF NOT EXISTS "+c.synqPrefix+"_meta_name_idx ON "+c.synqPrefix+"_meta(meta_name)"}),l&&c.enableDebug(),c.setDeviceId(),null!=r&&r.length)for(var _,T=o(r);!(_=T()).done;){var f=_.value;E.debug("\n@@@ preInit\n"+f+"\n@@@"),c.run({sql:f})}E.debug("@"+c.synqPrefix+"_meta",c.runQuery({sql:"SELECT * FROM pragma_table_info('"+c.synqPrefix+"_meta')"})),E.debug("@SIMPLE_SELECT",c.runQuery({sql:"SELECT '@@@ that was easy @@@'"}));for(var h,v=o(t);!(h=v()).done;){var I=h.value,R=c.runQuery({sql:"SELECT * FROM pragma_table_info('"+I.name+"')"});if(E.debug("@exists?",I.name,R),null==R||!R.length)throw new Error(I.name+" doesn't exist");E.debug("Setting up",I.name,I.id),d({table:I}),c.tablesReady()}if(null!=i&&i.length)for(var N,O=o(i);!(N=O()).done;){var g=N.value;E.debug("@@@\npostInit\n"+g+"\n@@@"),c.run({sql:g})}return c};export{f as default};
//# sourceMappingURL=tinysynq.module.js.map
