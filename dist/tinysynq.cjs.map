{"version":3,"file":"tinysynq.cjs","sources":["../src/lib/env.ts","../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/constants.ts","../src/lib/tinysynq.class.ts","../src/lib/trigger.ts","../src/lib/index.ts","../src/lib/server.ts","../src/index.ts"],"sourcesContent":["import 'dotenv/config'\n\ntype TinySynqEnv = typeof process.env & {\n  TINYSYNQ_WS_HOST: number;\n  TINYSYNQ_WS_PORT: number;\n  TINYSYNQ_HTTP_HOST: number;\n  TINYSYNQ_HTTP_PORT: number;\n  TINYSYNQ_LOG_LEVEL: number;\n  TINYSYNQ_LOG_FORMAT: \"json\" | \"pretty\" | \"hidden\";\n};\n\nexport const env = process.env as TinySynqEnv;","import BetterSqlite3 from 'better-sqlite3';\nimport { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type BetterSqlite3Instance = BetterSqlite3.Database\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: BetterSqlite3Instance;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: BetterSqlite3Instance;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * Device ID from which the change originated.\n   */\n  source: string;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude?: string;\n\n  since?: string;\n\n  checkpoint?: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare { // @TODO: rename to VCompare\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = '1970-01-01' } = this;\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return new Date(localTime) >= new Date(remoteTime);\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","export const TINYSYNQ_PREFIX = 'synq';\nexport const TINYSYNQ_BATCH_SIZE = 20;\nexport const TINYSYNQ_NANOID_SIZE = 16;\n\nexport const SYNQ_INSERT = 'INSERT';\nexport const SYNQ_UPDATE = 'UPDATE';\nexport const SYNQ_DELETE = 'DELETE';\n\nexport const TINYSYNQ_ISO8601_REGEX = /^\\d{4}(-\\d{2}){2}T(\\d{2}:){2}\\d{2}\\.\\d{1,3}Z$/\nexport const TINYSYNQ_SAFE_ISO8601_REGEX = /^\\d{4}(-\\d{2}){2}\\s(\\d{2}:){2}\\d{2}(\\.\\d{1,3})?$/","import { env } from './env.js';\nimport DB from 'better-sqlite3'\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, TinySynqOperation, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { nanoid } from 'nanoid';\nimport { VCompare } from './vcompare.class.js';\nimport { SYNQ_INSERT, SYNQ_UPDATE, TINYSYNQ_SAFE_ISO8601_REGEX } from './constants.js';\n\nconst log = new Logger({\n  name: 'tinysync-node',\n  minLevel: env.TINYSYNQ_LOG_LEVEL ?? LogLevel.Info,\n  type: env.TINYSYNQ_LOG_FORMAT || 'json'\n});\nconst strftimeAsISO8601 = `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>,\n  record: any;\n  meta: any;\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strftimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string,\n  isSafeISO8601: (date: string) => boolean\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strftimeAsISO8601,\n    nowAsISO8601: strftimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace(/[TZ]/g, ' ').trim();\n    },\n    isSafeISO8601: (date: string) => {\n      return (TINYSYNQ_SAFE_ISO8601_REGEX.test(date));\n    },\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysync-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n\n    if (!this.db) {\n      this._db = new DB(this.dbPath);\n      this.db.pragma('journal_mode = WAL');\n    }\n  }\n\n  /**\n   * better-sqlite3 instance (See {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysync`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      })[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.info('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', nanoid(16)]\n      });\n      log.info('@created record for device_id:', res[0].meta_value);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  run<T>(params: QueryParams): T {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@run', quid, sql, values, '/');\n    try {\n      const result = this.db.prepare(sql).run(values || []);\n      this.log.debug({quid, result});\n      return result;\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  runMany(params: {sql: string, values: any[]}) {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runMany', quid, sql, values, '/');\n    try {\n      const query = this.db.prepare(sql);\n      for (const v of values) {\n        query.run(v);\n      }\n      this.log.debug({quid, result: 'done'});\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  runQuery<T = any>(params: QueryParams): T {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', {quid, sql, values});\n    try {\n      const result = this.db.prepare(sql).all(values || []);\n      this.log.debug({quid, result});\n      return result;\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  getDeviceId(): string {\n    if (this._deviceId) return this._deviceId;\n    const res = this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  getLastSync(): string {\n    const res = this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Change[] {\n    let lastLocalSync: string = params?.lastLocalSync || this.getLastSync();\n    let { columns = [] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    console.log(sql)\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  getChangesSinceLastSync(params?: {columns?: string[]}): Change[] {\n    let lastLocalSync = this.getLastSync() || undefined; // @TODO: remove — getChanges already does this.\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  clearDebugData() {\n    this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  private beginTransaction(): string {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    this.run({sql});\n    return savepoint;\n  }\n\n  private commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  private rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private getRecord<T>(params: TableNameRowParams): T|any {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  getById<T>(params: TableNameRowParams): T | any {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  insertRecordMeta({change, vclock}: {change: Change, vclock: VClock}) {\n    if (!this.utils.isSafeISO8601(change.modified)) throw new Error(`Invalid modified data for record meta: ${change.modified}`)\n    this.log.debug('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: change.modified,\n    };\n    this.log.debug(\"@insertRecordMeta\", {values});\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock, modified)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock, :modified)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = this.db.prepare(sql).get({table_name, row_id});\n    return res;\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Returns the most recent change for a specific record.\n   * \n   * @param params \n   * @returns A single change record, if one exists\n   */\n  getMostRecentChange(params: {table_name: string, row_id: string, operation?: TinySynqOperation}) {\n    const conditions = [\n      'table_name = :table_name',\n      'row_id = :row_id'\n    ];\n    if (params.operation) {\n      conditions.push('operation = :operation');\n    }\n\n    const sql = `\n    SELECT * FROM ${this._synqPrefix}_changes\n    WHERE ${conditions.join(' AND ')}\n    ORDER BY modified DESC\n    LIMIT 1`;\n    const res = this.runQuery({sql, values: params});\n    return res[0];\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): boolean {\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    const localMeta = this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.trace('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.trace('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): PreProcessChangeResult {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = this.getRecord({table_name, row_id});\n    const meta = this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    const localTime = meta?.modified || '1970-01-01';\n    const remoteTime = change.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== SYNQ_INSERT) {\n      // But skip potential update-after-delete, which is handled later\n      if (!!meta && change.operation === SYNQ_UPDATE) {\n        this.log.warn('SKIPPED: non-existent record with existing meta', meta);\n      }\n      else {\n        reason = 'update before insert';\n        this.processOutOfOrderChange({change});\n      }\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { record, meta, valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    this.log.debug({table_name, row_id, conflicted, displaced, stale});\n\n    return { record, meta, valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Checks for incoming update on deleted record and attempts to resurrect it.\n   * \n   * @param params \n   * @returns Object with `valid` property\n   */\n  private processUpdateAfterDelete(params: PreProcessChangeResult & { change: Change, restore: boolean | undefined}) {\n    const { restore, record, change, meta } = params;\n    const { table_name, row_id } = change;\n    let valid = true;\n\n    if (!restore && !record && !!meta && change.operation === SYNQ_UPDATE) {\n      // If meta exists but the record doesn't, most likely it's\n      // because the record was deleted. If possible, restore it.\n      const lastChange = this.getMostRecentChange({\n        table_name,\n        row_id,\n        operation: TinySynqOperation.DELETE\n      });\n\n      if (lastChange) {\n        let recordData: any = {};\n        try {\n           recordData = JSON.parse(lastChange.data);\n        }\n        catch(err) {\n          valid = false;\n          this.log.error(err);\n        }\n\n        if (recordData) {\n          // Restore the record\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          this.run({sql: insertSql, values: recordData});\n        }\n      }\n      else {\n        valid = false;\n      }\n    }\n\n    return {valid};\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    //const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      // @TODO: There's no need to restrict editable fields here, but check again.\n      //.filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error(`No insertable data: ${JSON.stringify(data)}`);\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an update query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string. \n   */\n  createUpdateFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    if (!this._synqTables![table]) throw new Error(`Not a synced table for update: ${table}`);\n\n    const idCol = this._synqTables![table].id;\n    const updates = Object.keys(data)\n      .filter(k => k !== idCol)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    if (!updates) throw new Error(`No updates available: ${JSON.stringify(data)}`);\n  \n    const updateSql = `\n      UPDATE ${table} SET ${updates}\n      WHERE ${idCol} = :${idCol}\n      RETURNING *;`;\n\n    return updateSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes available');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  private updateLastSync({change}: {change: Change}) {\n    this.run({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync'},\n    });\n    this.run({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n  }\n\n  private insertChangeData({change}: {change: Change}) {\n    const values: any = {...change};\n    delete values.id;\n\n    const sql = this.createInsertFromSystemObject({\n      data: values,\n      table_name: `${this.synqPrefix}_changes`\n    });\n    this.log.debug('@insertChangeData', {sql, values});\n\n    values.vclock = JSON.stringify(change.vclock);\n    this.run({sql, values});\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = this.preProcessChange({change, restore});\n      this.log.warn({changeStatus})\n      if (!changeStatus.valid) {\n        console.log(changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      // Check for update-after-delete. It's done here so that stale changes are skipped.\n      const uadStatus = this.processUpdateAfterDelete({\n        ...changeStatus,\n        change,\n        restore\n      });\n      if (!uadStatus.valid) {\n        this.log.warn(changeStatus);\n        this.updateLastSync({change});\n        return; \n      }\n\n      const table = this.synqTables![change.table_name];\n      const idCol = this.getTableIdColumn(change);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n          recordData[idCol] = change.row_id;\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      \n      // Store the change before applying\n      this.insertChangeData({change});\n\n      switch(change.operation) {\n        case 'INSERT':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          this.run({sql: insertSql, values: recordData});\n          break;\n        case 'UPDATE':\n          const updateSql = this.createUpdateFromObject({\n            data: recordData,\n            table_name: change.table_name,\n          });\n          this.run({sql: updateSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          this.run({sql, values: [change.row_id]});\n          break;\n      }\n\n      this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    this.log.trace('\\n<<< @CHANGES >>>\\n', changes, '\\n<<< @CHANGES >>>\\n')\n    this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = this.beginTransaction();\n      try {\n        for (const change of batch) {\n          this.applyChange({change, restore, savepoint})\n        }\n\n        // Commit the changes for this batch\n        this.commitTransaction({savepoint});\n\n      } catch (error) {\n        this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let conditions: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      conditions.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      conditions.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      conditions.push('modified > :since');\n      values.since = opts.since\n    }\n    const where = conditions.length ? `WHERE ${conditions.join(' AND ')}` : '';\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    ${where} \n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  tablesReady() {\n    this.enableTriggers();\n  }\n}","\n\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { SyncableTable } from \"./types.js\";\n\nexport const getOldVsNewUnionColumnSelection = (params: {columns: any[]}) => {\n  if (!params.columns) throw new Error('Missing table column data to generate trigger union column selection'); \n\n  return params.columns.map((c) => `SELECT '${c.name}' AS col, OLD.${c.name} AS old_val, NEW.${c.name} AS new_val`);\n}\n\nexport const getUpdateTriggerDiffQuery = (params: {ts: TinySynq, table: SyncableTable}) => {\n  const { ts, table } = params;\n  // Need to get the table schema in order to generate the query.\n  const columns = ts.runQuery({\n    sql: `SELECT * FROM pragma_table_info('${table.name}')`\n  });\n\n  const unionSelects = getOldVsNewUnionColumnSelection({columns});\n  const sql = `\n  INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n  SELECT * FROM (\n    WITH RECURSIVE all_cols AS (\n      ${unionSelects.join('\\n    UNION ALL\\n    ')}\n    ),\n    changed_cols AS (\n      SELECT col, new_val\n      FROM all_cols\n      WHERE new_val != old_val\n    )\n    SELECT '${table.name}', NEW.${table.id}, 'UPDATE', json_group_object(col, new_val)\n    FROM changed_cols\n  );`;\n  console.log('@getUpdateTriggerDiffQuery', sql)\n\n  return sql;\n};","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\nimport { getUpdateTriggerDiffQuery } from \"./trigger.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysync-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    This is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a row operation (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n      - the source of this change\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around this we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is a 'peg' which we use to sort the UNIONed rows to \n      ensure that if a valid row exists, it's the first row returned.\n    - Now we select from this union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the relevant columns.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id,\n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1 as mod, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE id IN (\n        SELECT id FROM ${ts.synqPrefix}_changes\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n        ORDER by id desc\n        LIMIT 1\n      );\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    })[0];\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const insertTriggerSql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    ts.run({sql: insertTriggerSql});\n\n    const updateTriggerSql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        ${getUpdateTriggerDiffQuery({ts, table})}\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    ts.run({sql: updateTriggerSql});\n\n    /*\n    Stores current record as JSON in `data` column as is done for INSERTs.\n    This will act as a \"tombstone\" record in case of update-after-delete.\n\n    Restoration will involve checking for a DELETE change for the table/row_id\n    and reinserting it if it exists, then applying the incoming update. Finally,\n    a record is added to `*_notice` informing of the resurrection.\n    */\n    const deleteTriggerSql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', OLD.${table.id}, 'DELETE', ${oldJsonObject});\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n\n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    ts.run({sql: deleteTriggerSql});\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER NOT NULL,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n\n  ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) ts.enableDebug();\n\n  // Set the device ID\n  ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      try {\n        log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n        ts.run({\n          sql: preInitQuery\n        });\n      }\n      catch(err) {\n        log.error('@preInit', err)\n      }\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.warn(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      const result = ts.run({\n        sql: postInitQuery\n      });\n      log.trace(`@@@ postInit RESULT\\n`, result);\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","import { env } from './env.js';\nimport * as uWS from 'uWebSockets.js';\nimport { threadId } from 'worker_threads';\nimport { TinySynq } from './tinysynq.class.js';\nimport { LogLevel, SyncRequestType, SyncResponseType } from './types.js';\nimport { ILogObj, ISettingsParam, Logger } from 'tslog';\n\ninterface TSTemplatedApp extends uWS.TemplatedApp {\n  ts: TinySynq,\n  log: Logger<ILogObj>\n}\n\nexport interface TSServerParams {\n  ts: TinySynq,\n  port?: number;\n  logOptions: ISettingsParam<ILogObj>\n}\n\nlet server;\n\nfunction arrayBufferToString(arrBuff: ArrayBuffer): string {\n  return Buffer.from(arrBuff).toString();\n} \n\nconst app = uWS.App() as TSTemplatedApp;\n\n// @TODO: request IDs\n\napp.ws('/*', {\n  compression: uWS.SHARED_COMPRESSOR,\n  maxPayloadLength: 16 * 1024 * 1024, // 16MB\n  idleTimeout: 120,\n  sendPingsAutomatically: true,\n  open: ws => {\n    const addr = arrayBufferToString(ws.getRemoteAddressAsText());\n    app.log.warn('@Connected!', addr);\n    ws.subscribe('broadcast');\n  },\n  message: (ws, message, isBinary) => {\n    const addr = arrayBufferToString(ws.getRemoteAddressAsText());\n    const messageString = arrayBufferToString(message);\n    const parsed = JSON.parse(messageString);\n    const { requestId } = parsed;\n    app.log.debug('@Message!', parsed.changes, app.ts.deviceId);\n    try {\n      switch(parsed.type) {\n        case SyncRequestType.push:\n          if (!parsed.source) {\n            app.log.error('INVALID_SOURCE', {parsed});\n            throw new Error('Invalid source');\n          }  \n          const incoming = parsed.changes.map((c: any) => {\n            c.source = parsed.source\n            delete c.mod;\n            //c.vclock = JSON.parse(c.vclock);\n            return c;\n          });\n          console.debug('\\n<<<< INCOMING >>>>\\n', incoming);\n          app.ts.applyChangesToLocalDB({changes: incoming});\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId}));\n          ws.publish('broadcast', JSON.stringify({changes: incoming}), false);\n          break;\n        case SyncRequestType.pull:\n          // @TODO: Eh? Didn't I work this out already?\n          const changes = app.ts.getFilteredChanges();\n          app.log.debug('@pull: outgoing:', changes);\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId, changes}));\n          break;\n        default:\n          throw new Error('Invalid request type:', parsed.type);\n      }\n      \n    }\n    catch(err: any) {\n      app.log.error(err, {addr, for: JSON.stringify(parsed)});\n      ws.send(JSON.stringify({\n        type: SyncResponseType.nack,\n        requestId: parsed.requestId,\n        message: err.message\n      }));\n    }\n  },\n});\n\nexport const startTinySynqServer = (params: TSServerParams) => {\n  const port = params.port || Number(env.TINYSYNQ_WS_PORT) || 7174;\n  app.ts = params.ts;\n  app.log = new Logger({\n    name:'tinysynq-node-ws',\n    minLevel: params.logOptions.minLevel || Number(env.TINYSYNQ_LOG_LEVEL) || LogLevel.Info,\n    type: env.TINYSYNQ_LOG_FORMAT || 'json',\n    ...(params.logOptions || {})\n  });\n  server = app.listen(port, token => {\n    if (token) {\n      app.log.info(`TinySynq server listening on port ${port} from thread ${threadId}`);\n    }\n    else {\n      app.log.error(`Failed to listen on port ${port} from thread ${threadId}`);\n    }\n  });\n  return server;\n}","import lib from './lib/index.js';\nimport { startTinySynqServer } from './lib/server.js';\n\nexport default { startTinySynqServer, initTinySynq: lib };\n\nexport type { \n  SyncableTable,\n  TinySynqOptions,\n  TinySynqOptionsBase,\n  Change,\n  QueryParams,\n  BetterSqlite3Instance,\n} from './lib/types.js';\n\nexport type {\n  TinySynq,\n  GetTableIdColumnParams,\n} from './lib/tinysynq.class.js';"],"names":["env","process","TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","constructor","local","remote","localId","localTime","remoteTime","isGreater","isLess","isWrongOrder","JSON","parse","setRemote","isConflicted","data","keys","Object","forEach","k","localCount","remoteCount","isOutDated","Error","Date","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","merged","participants","Set","concat","p","localP","remoteP","max","undefined","SYNQ_INSERT","SYNQ_UPDATE","TINYSYNQ_SAFE_ISO8601_REGEX","log","Logger","name","minLevel","_env$TINYSYNQ_LOG_LEV","TINYSYNQ_LOG_LEVEL","Info","type","TINYSYNQ_LOG_FORMAT","strftimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toISOString","replace","trim","isSafeISO8601","date","test","filePath","sqlite3","tables","t","prefix","batchSize","wal","Debug","maskValuesOfKeys","hideLogPositionForProduction","logOptions","db","DB","dbPath","pragma","deviceId","synqDbId","synqPrefix","synqTables","synqBatchSize","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","table_name","id","setDeviceId","_existing","_existing2","existing","runQuery","sql","err","warn","info","meta_value","res","values","run","quid","ceil","random","debug","result","prepare","error","runMany","query","v","all","getDeviceId","getLastSync","_res$","trace","getChanges","lastLocalSync","columns","where","columnSelection","map","c","join","console","getChangesSinceLastSync","enableDebug","disableDebug","clearDebugData","enableTriggers","disableTriggers","beginTransaction","savepoint","now","commitTransaction","rollbackTransaction","getRecord","row_id","idCol","getById","insertRecordMeta","change","vclock","modified","source","mod","stringify","getRecordMeta","get","getPending","getMostRecentChange","conditions","operation","push","processOutOfOrderChange","createInsertFromSystemObject","processConflictedChange","record","INSERT","localMeta","preProcessChange","restore","defaultReason","valid","reason","meta","latest","localV","displaced","conflicted","stale","checks","processUpdateAfterDelete","lastChange","DELETE","recordData","insertSql","createInsertFromObject","table","columnsToInsert","updates","insertPlaceholders","createUpdateFromObject","updateSql","silly","updateLastSync","value","insertChangeData","applyChange","changeStatus","uadStatus","updatedRecordMeta","applyChangesToLocalDB","changes","batch","slice","getFilteredChanges","exclude","checkpoint","since","tablesReady","getOldVsNewUnionColumnSelection","getUpdateTriggerDiffQuery","ts","unionSelects","initTinySynq","config","preInit","postInit","getRecordMetaInsertQuery","remove","version","getChangeUpdateQuery","setupTriggersForTable","jsonObject","oldJsonObject","jo","insertTriggerSql","updateTriggerSql","deleteTriggerSql","preInitQuery","exists","postInitQuery","server","arrayBufferToString","arrBuff","Buffer","from","toString","app","uWS","App","ws","compression","SHARED_COMPRESSOR","maxPayloadLength","idleTimeout","sendPingsAutomatically","open","addr","getRemoteAddressAsText","subscribe","message","isBinary","messageString","parsed","requestId","incoming","send","ack","publish","pull","for","nack","startTinySynqServer","port","Number","TINYSYNQ_WS_PORT","listen","token","threadId","lib"],"mappings":"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"}