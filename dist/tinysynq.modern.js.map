{"version":3,"file":"tinysynq.modern.js","sources":["../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/env.ts","../src/lib/server.ts","../src/index.ts"],"sourcesContent":["import DB from 'better-sqlite3'\nimport { TinySynqSync, TinySynqOptions } from '@bspeckco/tinysynq-lib';\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends TinySynqSync {\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super(opts);\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n\n    if (!this.db) {\n      this._db = new DB(this.dbPath);\n      this.db.pragma('journal_mode = WAL');\n    }\n  }\n}\n","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport {\n  createInternalTablesSync,\n  setupTriggersForTableSync,\n  TinySynqOptions,\n} from \"@bspeckco/tinysynq-lib\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysync-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n\n  createInternalTablesSync({ ts });\n\n  // Enable debug mode\n  if (debug) ts.enableDebug();\n\n  // Set the device ID\n  ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      try {\n        log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n        ts.run({\n          sql: preInitQuery\n        });\n      }\n      catch(err) {\n        log.error('@preInit', err)\n      }\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    setupTriggersForTableSync({ table, ts });\n  }\n  \n  ts.tablesReady();\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.warn(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      const result = ts.run({\n        sql: postInitQuery\n      });\n      log.trace(`@@@ postInit RESULT\\n`, result);\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;\n","import 'dotenv/config'\n\ntype TinySynqEnv = typeof process.env & {\n  TINYSYNQ_WS_HOST: number;\n  TINYSYNQ_WS_PORT: number;\n  TINYSYNQ_HTTP_HOST: number;\n  TINYSYNQ_HTTP_PORT: number;\n  TINYSYNQ_LOG_LEVEL: number;\n  TINYSYNQ_LOG_FORMAT: \"json\" | \"pretty\" | \"hidden\";\n};\n\nexport const env = process.env as TinySynqEnv;","import { env } from './env.js';\nimport * as uWS from 'uWebSockets.js';\nimport { threadId } from 'worker_threads';\nimport { TinySynq } from './tinysynq.class.js';\nimport { Change, LogLevel, SyncRequestType, SyncResponseType } from '@bspeckco/tinysynq-lib';\nimport { ILogObj, ISettingsParam, Logger } from 'tslog';\n\n\ninterface TSTemplatedApp extends uWS.TemplatedApp {\n  ts: TinySynq;\n  log: Logger<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>;\n}\n\nexport type SocketRequestType = SyncRequestType; \n\nexport interface TSServerParams {\n  ts: TinySynq;\n  port?: number;\n  logOptions: ISettingsParam<ILogObj>;\n  auth?: (req: uWS.HttpRequest) => Promise<boolean | Record<string, any>>; // Handles auth during upgrade (headers/cookies)\n}\n\n// Represents incoming push/pull requests (from tinysynq-lib)\nexport interface TSSocketRequestParams {\n  changes?: Change[];\n  requestId?: string;\n  source?: string;\n  type: SyncRequestType; // From lib (push/pull)\n  since: string;\n  checkpoint: number;\n}\n\n// User data attached to each WebSocket connection\ninterface WebSocketUserData {\n  remoteAddress: string;\n  // No longer need isAuthenticated flag\n  [key: string]: any; // Allow storing arbitrary data from auth functions\n}\n\nlet server;\n\nfunction arrayBufferToString(arrBuff: ArrayBuffer): string {\n  return Buffer.from(arrBuff).toString();\n} \n\nconst app = uWS.App({}) as TSTemplatedApp;\n\napp.ws<WebSocketUserData>('/*', { // Specify UserData type here\n  compression: uWS.SHARED_COMPRESSOR,\n  maxPayloadLength: 16 * 1024 * 1024,\n  idleTimeout: 120,\n  sendPingsAutomatically: true,\n\n  upgrade: async (res, req, context) => {\n    const secWebSocketKey = req.getHeader('sec-websocket-key');\n    const secWebSocketProtocol = req.getHeader('sec-websocket-protocol');\n    const secWebSocketExtensions = req.getHeader('sec-websocket-extensions');\n    const remoteAddress = arrayBufferToString(res.getRemoteAddressAsText());\n\n    res.onAborted(() => {\n      app.log.warn(`Connection aborted for ${remoteAddress}`);\n      res.aborted = true;\n    });\n\n    let userData: WebSocketUserData = { remoteAddress }; // Base user data\n    \n    try {\n      if (app.auth) {\n        // Perform authentication using the provided auth function\n        app.log.debug(`Performing auth for ${remoteAddress}`);\n        const authResult = await app.auth(req);\n\n        if (authResult === true) {\n          app.log.debug(`Auth successful (true) for ${remoteAddress}`);\n          // Proceed to upgrade, userData only contains remoteAddress unless modified by auth fn later\n        } else if (typeof authResult === 'object' && authResult !== null) {\n          app.log.debug(`Auth successful (object) for ${remoteAddress}`, authResult);\n          // Merge returned user data\n          Object.assign(userData, authResult);\n        } else {\n          // Auth failed (false, null, undefined, etc.)\n          app.log.warn(`Auth failed for ${remoteAddress} (result: ${JSON.stringify(authResult)}), denying connection.`);\n          res.cork(() => {\n             res.writeStatus('401 Unauthorized').end();\n          });\n          return; // Stop processing\n        }\n      } else {\n        // No auth function configured, allow connection\n        app.log.trace(`No auth configured, allowing connection for ${remoteAddress}`);\n      }\n\n      // If we reach here, authentication passed or was not required.\n      app.log.debug(`Upgrading connection for ${remoteAddress}, userData:`, userData);\n      if (!res.aborted) {\n        res.upgrade(\n          userData,\n          secWebSocketKey,\n          secWebSocketProtocol,\n          secWebSocketExtensions,\n          context\n        );\n      } else {\n         app.log.warn(`Upgrade aborted for ${remoteAddress} during auth.`);\n      }\n\n    } catch (err: any) {\n      // Error during auth function execution\n      app.log.error(`Auth error during upgrade for ${remoteAddress}: ${err.message}`);\n      if (!res.aborted) {\n         res.cork(() => {\n             res.writeStatus('500 Internal Server Error').end();\n         });\n      }\n    }\n  },\n\n  open: (ws) => {\n    const userData = ws.getUserData();\n    app.log.warn('@Connected!', userData);\n    ws.subscribe('broadcast');\n  },\n\n  message: async (ws, message, isBinary) => {\n    const userData = ws.getUserData();\n    const remoteAddress = userData.remoteAddress;\n    let parsed: any;\n\n    try {\n      // Ensure message is parsed safely\n      try {\n        const messageString = arrayBufferToString(message);\n        parsed = JSON.parse(messageString);\n      } catch (parseError: any) {\n        app.log.warn(`Failed to parse message from ${remoteAddress}: ${parseError.message}`);\n        ws.close(); // Close connection on parse error\n        return;\n      }\n\n      app.log.trace(`Raw message from ${remoteAddress}:`, parsed);\n\n      // --- Handle Authenticated Connections (All connections are considered authenticated here) ---\n      // Ensure the message type is a valid SyncRequestType before proceeding\n      if (typeof parsed.type !== 'string' || !(Object.values(SyncRequestType).includes(parsed.type as SyncRequestType))) {\n          app.log.warn('INVALID_MESSAGE_TYPE received', { parsed, remoteAddress });\n          ws.send(JSON.stringify({ type: SyncResponseType.nack, requestId: parsed?.requestId, message: `Invalid message type: ${parsed?.type}` }));\n          return;\n      }\n\n      const syncRequestParams = parsed as TSSocketRequestParams;\n      const { requestId } = syncRequestParams;\n      app.log.debug(`@Message (${remoteAddress})!`, syncRequestParams.changes, app.ts.deviceId);\n\n      switch(syncRequestParams.type) {\n        case SyncRequestType.push:\n          if (!syncRequestParams.source) {\n            app.log.error('INVALID_SOURCE', {parsed: syncRequestParams, remoteAddress});\n            throw new Error('Invalid source');\n          }  \n          const incoming = syncRequestParams.changes?.map((c: any) => {\n            c.source = syncRequestParams.source;\n            delete c.mod;\n            return c as Change;\n          }) || [];\n          app.log.debug('\\n<<<< INCOMING >>>>\\n', incoming);\n          await app.ts.applyChangesToLocalDB({changes: incoming}); \n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId}));\n          ws.publish('broadcast', JSON.stringify({changes: incoming}), false);\n          break;\n        case SyncRequestType.pull:\n          const params = { ...syncRequestParams } as any;\n          delete params?.type;\n          const changes = await app.ts.getFilteredChanges(syncRequestParams); \n          app.log.debug('@pull: outgoing:', changes);\n          ws.send(JSON.stringify({type: SyncResponseType.ack, requestId, changes}));\n          break;\n        default:\n          throw new Error(`Invalid request type on connection: '${syncRequestParams.type}'`);\n      }\n      \n    } catch(err: any) {\n      // General error handling for message processing\n      app.log.error(`Top-level message handler error for ${remoteAddress}: ${err.message}`, { error: err, parsed });\n      try {\n         ws.send(JSON.stringify({\n           type: SyncResponseType.nack, \n           requestId: parsed?.requestId,\n           message: `Server error processing message: ${err.message}`\n         }));\n      } catch (sendError: any) {\n          app.log.warn(`Failed to send error NACK to ${remoteAddress}, connection likely closed: ${sendError.message}`);\n      }\n       ws.close();\n    }\n  },\n\n});\n\nexport interface TinySynqServerControl {\n  app: TSTemplatedApp;\n  close: () => void;\n}\n\nexport const startTinySynqServer = (params: TSServerParams): TinySynqServerControl => {\n  let listenSocket: uWS.us_listen_socket | null = null;\n  const port = params.port || Number(env.TINYSYNQ_WS_PORT) || 7174;\n  app.ts = params.ts;\n  app.auth = params.auth; // Assign the (renamed) auth function\n  // app.validateAuthData = params.validateAuthData; // Removed\n  app.log = new Logger({\n    name:'tinysynq-node-ws',\n    minLevel: params.logOptions.minLevel || Number(env.TINYSYNQ_LOG_LEVEL) || LogLevel.Info,\n    type: env.TINYSYNQ_LOG_FORMAT || 'json',\n    ...(params.logOptions || {})\n  });\n\n  app.listen(port, socket => {\n    listenSocket = socket;\n    if (listenSocket) {\n      app.log.info(`TinySynq server listening on port ${port} from thread ${threadId}`);\n    } else {\n      app.log.error(`Failed to listen on port ${port} from thread ${threadId}`);\n    }\n  });\n\n  return {\n    app,\n    close: () => {\n      if (listenSocket) {\n        app.log.info(`Closing server socket on port ${port}`);\n        uWS.us_listen_socket_close(listenSocket);\n        listenSocket = null;\n      } else {\n        app.log.warn(`Attempted to close server, but socket was not listening or already closed.`);\n      }\n    }\n  };\n}\n","import lib from './lib/index.js';\nimport { startTinySynqServer } from './lib/server.js';\n\nexport default { startTinySynqServer, initTinySynq: lib };\n\nexport type { \n  BetterSqlite3Instance,\n} from './lib/types.js';\n\nexport type {\n  SyncableTable,\n  TinySynqOptions,\n  GetTableIdColumnParams,\n  Change,\n  QueryParams,\n} from '@bspeckco/tinysynq-lib';\n\nexport type {\n  TinySynq,\n} from './lib/tinysynq.class.js';\n"],"names":["TinySynq","TinySynqSync","constructor","opts","filePath","sqlite3","Error","db","_db","DB","dbPath","pragma","initTinySynq","config","tables","preInit","postInit","logOptions","debug","length","log","Logger","_extends","name","ts","createInternalTablesSync","enableDebug","setDeviceId","preInitQuery","run","sql","err","error","synqPrefix","runQuery","table","exists","id","setupTriggersForTableSync","tablesReady","postInitQuery","warn","result","trace","env","process","arrayBufferToString","arrBuff","Buffer","from","toString","app","uWS","App","ws","compression","SHARED_COMPRESSOR","maxPayloadLength","idleTimeout","sendPingsAutomatically","upgrade","res","req","context","secWebSocketKey","getHeader","secWebSocketProtocol","secWebSocketExtensions","remoteAddress","getRemoteAddressAsText","onAborted","aborted","userData","auth","authResult","Object","assign","JSON","stringify","cork","writeStatus","end","message","open","getUserData","subscribe","isBinary","_syncRequestParams$ch","parsed","messageString","parse","parseError","close","type","values","SyncRequestType","includes","_parsed","_parsed2","send","SyncResponseType","nack","requestId","syncRequestParams","changes","deviceId","push","source","incoming","map","c","mod","applyChangesToLocalDB","ack","publish","pull","params","getFilteredChanges","_parsed3","sendError","startTinySynqServer","listenSocket","port","Number","TINYSYNQ_WS_PORT","minLevel","TINYSYNQ_LOG_LEVEL","LogLevel","Info","TINYSYNQ_LOG_FORMAT","listen","socket","info","threadId","us_listen_socket_close","lib"],"mappings":"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"}