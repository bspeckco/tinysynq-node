{"version":3,"file":"tinysynq.modern.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/constants.ts","../src/lib/index.ts"],"sourcesContent":["import BetterSqlite3 from 'better-sqlite3';\nimport { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type BetterSqlite3Instance = BetterSqlite3.Database\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: BetterSqlite3Instance;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: BetterSqlite3Instance;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare { // @TODO: rename to VCompare\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n\n  constructor({ local, remote, localId }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    \n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    // Locally changes have taken places that the remote is missing.\n    return local[localId] > remote[localId];\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import DB from 'better-sqlite3'\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOptions, SyncableTable, TableNameRowParams, VClock } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { nanoid } from 'nanoid';\nimport { VCompare } from './vcompare.class.js';\nimport { SYNQ_INSERT } from './constants.js';\n\nconst log = new Logger({ name: 'tinysync-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysync-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n\n    if (!this.db) {\n      this._db = new DB(this.dbPath);\n      this.db.pragma('journal_mode = WAL');\n    }\n  }\n\n  /**\n   * better-sqlite3 instance (See {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysync`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      })[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', nanoid(16)]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  run<T>(params: QueryParams): T {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@run', quid, sql, values, '/');\n    try {\n      const result = this.db.prepare(sql).run(values || []);\n      this.log.debug({quid, result});\n      return result;\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  runMany(params: {sql: string, values: any[]}) {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runMany', quid, sql, values, '/');\n    try {\n      const query = this.db.prepare(sql);\n      for (const v of values) {\n        query.run(v);\n      }\n      this.log.debug({quid, result: 'done'});\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  runQuery<T = any>(params: QueryParams): T {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', {quid, sql, values});\n    try {\n      const result = this.db.prepare(sql).all(values || []);\n      this.log.debug({quid, result});\n      return result;\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  getDeviceId(): string {\n    if (this._deviceId) return this._deviceId;\n    const res = this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  getLastSync(): string {\n    const res = this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Change[] {\n    let lastLocalSync: string = params?.lastLocalSync || this.getLastSync();\n    let { columns = [] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    console.log(sql)\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  getChangesSinceLastSync(params?: {columns?: string[]}): Change[] {\n    let lastLocalSync = this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  clearDebugData() {\n    this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  private beginTransaction(): string {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    this.run({sql});\n    return savepoint;\n  }\n\n  private commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  private rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private getRecord<T>(params: TableNameRowParams): T|any {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  getById<T>(params: TableNameRowParams): T | any {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  insertRecordMeta({change, vclock}: any) {\n    //this.log.warn('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      vclock: JSON.stringify(vclock)\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n      VALUES (:table_name, :row_id, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET mod = :mod, vclock = :vclock\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = this.db.prepare(sql).get({table_name, row_id});\n    return res;\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): boolean {\n    const localMeta = this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.trace('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.warn('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): PreProcessChangeResult {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = this.getRecord({table_name, row_id});\n    const meta = this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== SYNQ_INSERT) {\n      reason = 'update before insert';\n      this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    validationCondition:\n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      break validationCondition;\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    this.log.debug({table_name, row_id, conflicted, displaced, stale});\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable;\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  private updateLastSync({change}: {change: Change}) {\n    const metaInsert = this.db.prepare(`INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`);\n    const metaInsertMany = this.db.transaction((data: any) => {\n      for (const d of data) metaInsert.run(d);\n    });\n    metaInsertMany([\n      { name: 'last_local_sync', value: `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`},\n      { name: 'last_sync', value: change.id }\n    ]);\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = this.preProcessChange({change, restore});\n      if (!changeStatus.valid) {\n        this.log.warn(changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.run({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n\n      this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = this.beginTransaction();\n      try {\n        for (const change of batch) {\n          this.applyChange({change, restore, savepoint})\n        }\n\n        // Commit the changes for this batch\n        this.commitTransaction({savepoint});\n\n      } catch (error) {\n        this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  tablesReady() {\n    this.enableTriggers();\n  }\n}","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;\nexport const SYNQLITE_NANOID_SIZE = 16;\n\nexport const SYNQ_INSERT = 'INSERT';\nexport const SYNQ_UPDATE = 'UPDATE';\nexport const SYNQ_DELETE = 'DELETE';","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst setupDatabase = (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysync-setup', ...logOptions});\n  const db = new TinySynq(config);\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${db.synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n    SELECT table_name, row_id, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${db.deviceId}', IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1) as vclock\n      FROM ${db.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, 1, json_object('${db.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      mod = json_extract(excluded.vclock,'$.${db.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$')\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const setupTriggersForTable = ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_insert_${table.name}`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_update_${table.name}`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    db.run({sql});\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    });\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_${table.name}`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_before_insert_record_meta`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_record_meta`});\n    db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_change_modified_idx ON ${db.synqPrefix}_changes(modified)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_pending_table_row_idx ON ${db.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  db.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${db.synqPrefix}_record_meta_idx ON ${db.synqPrefix}_record_meta(table_name, row_id)`\n  });\n\n  // Create meta table\n  db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  db.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  db.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_meta_name_idx ON ${db.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) db.enableDebug();\n\n  // Set the device ID\n  db.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      db.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${db.synqPrefix}_meta`, db.runQuery({sql:`SELECT * FROM pragma_table_info('${db.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, db.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = db.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    setupTriggersForTable({ table });\n    db.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      db.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return db;\n};\n\nexport default setupDatabase;"],"names":["TinySynqOperation","LogLevel","VCompare","constructor","local","remote","localId","this","isGreater","isLess","isWrongOrder","JSON","parse","setRemote","isConflicted","data","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","Error","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","merged","participants","Set","concat","p","max","undefined","log","Logger","name","minLevel","Info","strtimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filePath","sqlite3","tables","t","prefix","trim","replace","batchSize","wal","Debug","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","db","DB","dbPath","pragma","deviceId","synqDbId","synqPrefix","synqTables","synqBatchSize","getTableIdColumn","params","_this$synqTables$tabl","table_name","id","setDeviceId","_existing","_existing2","existing","runQuery","sql","err","warn","meta_value","res","values","nanoid","run","quid","ceil","random","debug","result","prepare","error","runMany","query","v","all","getDeviceId","getLastSync","_res$","trace","getChanges","lastLocalSync","columns","where","map","c","join","console","getChangesSinceLastSync","enableDebug","disableDebug","clearDebugData","enableTriggers","disableTriggers","beginTransaction","savepoint","now","commitTransaction","rollbackTransaction","getRecord","row_id","idCol","getById","insertRecordMeta","change","vclock","mod","stringify","getRecordMeta","get","getPending","processOutOfOrderChange","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","record","localMeta","modified","preProcessChange","restore","defaultReason","valid","reason","meta","latest","localV","displaced","conflicted","stale","operation","checks","createInsertFromObject","table","columnsToInsert","editable","updates","key","includes","silly","updateLastSync","metaInsert","transaction","d","metaInsertMany","value","applyChange","changeStatus","recordData","insertSql","updatedRecordMeta","applyChangesToLocalDB","changes","batch","slice","tablesReady","setupDatabase","config","preInit","postInit","getRecordMetaInsertQuery","remove","version","setupTriggersForTable","jsonObject","jo","oldJsonObject","preInitQuery","exists","postInitQuery"],"mappings":"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"}